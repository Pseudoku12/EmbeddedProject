
Refrigerator1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800586c  0800586c  0001586c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800590c  0800590c  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005914  08005914  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005914  08005914  00015914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005918  08005918  00015918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800591c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045fc  200000d8  080059f4  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200046d4  080059f4  000246d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b93  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002949  00000000  00000000  00030c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc8  00000000  00000000  000335e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b90  00000000  00000000  000342b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001757a  00000000  00000000  00034e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b35c  00000000  00000000  0004c3ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e081  00000000  00000000  00057716  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5797  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003620  00000000  00000000  000e5814  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005854 	.word	0x08005854

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	08005854 	.word	0x08005854

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f92f 	bl	800080c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	200f      	movs	r0, #15
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f004 fbd8 	bl	8004d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f939 	bl	800085a <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f90f 	bl	8000822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000070 	.word	0x20000070
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	200045f4 	.word	0x200045f4

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200045f4 	.word	0x200045f4

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000004 	.word	0x20000004

080006a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006da:	4a04      	ldr	r2, [pc, #16]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	60d3      	str	r3, [r2, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__NVIC_GetPriorityGrouping+0x18>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	f003 0307 	and.w	r3, r3, #7
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071c:	2b00      	cmp	r3, #0
 800071e:	db0a      	blt.n	8000736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	490c      	ldr	r1, [pc, #48]	; (8000758 <__NVIC_SetPriority+0x4c>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	0112      	lsls	r2, r2, #4
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	440b      	add	r3, r1
 8000730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000734:	e00a      	b.n	800074c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4908      	ldr	r1, [pc, #32]	; (800075c <__NVIC_SetPriority+0x50>)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	3b04      	subs	r3, #4
 8000744:	0112      	lsls	r2, r2, #4
 8000746:	b2d2      	uxtb	r2, r2
 8000748:	440b      	add	r3, r1
 800074a:	761a      	strb	r2, [r3, #24]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000e100 	.word	0xe000e100
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000760:	b480      	push	{r7}
 8000762:	b089      	sub	sp, #36	; 0x24
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	f1c3 0307 	rsb	r3, r3, #7
 800077a:	2b04      	cmp	r3, #4
 800077c:	bf28      	it	cs
 800077e:	2304      	movcs	r3, #4
 8000780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3304      	adds	r3, #4
 8000786:	2b06      	cmp	r3, #6
 8000788:	d902      	bls.n	8000790 <NVIC_EncodePriority+0x30>
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3b03      	subs	r3, #3
 800078e:	e000      	b.n	8000792 <NVIC_EncodePriority+0x32>
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	f04f 32ff 	mov.w	r2, #4294967295
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	43da      	mvns	r2, r3
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	401a      	ands	r2, r3
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	fa01 f303 	lsl.w	r3, r1, r3
 80007b2:	43d9      	mvns	r1, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	4313      	orrs	r3, r2
         );
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3724      	adds	r7, #36	; 0x24
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
	...

080007c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d8:	d301      	bcc.n	80007de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007da:	2301      	movs	r3, #1
 80007dc:	e00f      	b.n	80007fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <SysTick_Config+0x40>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e6:	210f      	movs	r1, #15
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f7ff ff8e 	bl	800070c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <SysTick_Config+0x40>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <SysTick_Config+0x40>)
 80007f8:	2207      	movs	r2, #7
 80007fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	e000e010 	.word	0xe000e010

0800080c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ff47 	bl	80006a8 <__NVIC_SetPriorityGrouping>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
 800082e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000834:	f7ff ff5c 	bl	80006f0 <__NVIC_GetPriorityGrouping>
 8000838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	68b9      	ldr	r1, [r7, #8]
 800083e:	6978      	ldr	r0, [r7, #20]
 8000840:	f7ff ff8e 	bl	8000760 <NVIC_EncodePriority>
 8000844:	4602      	mov	r2, r0
 8000846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084a:	4611      	mov	r1, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff5d 	bl	800070c <__NVIC_SetPriority>
}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ffb0 	bl	80007c8 <SysTick_Config>
 8000868:	4603      	mov	r3, r0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000874:	b480      	push	{r7}
 8000876:	b089      	sub	sp, #36	; 0x24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
 800088e:	e159      	b.n	8000b44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000890:	2201      	movs	r2, #1
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	697a      	ldr	r2, [r7, #20]
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	f040 8148 	bne.w	8000b3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d00b      	beq.n	80008ce <HAL_GPIO_Init+0x5a>
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d007      	beq.n	80008ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c2:	2b11      	cmp	r3, #17
 80008c4:	d003      	beq.n	80008ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	2b12      	cmp	r3, #18
 80008cc:	d130      	bne.n	8000930 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	2203      	movs	r2, #3
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43db      	mvns	r3, r3
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	4013      	ands	r3, r2
 80008e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	68da      	ldr	r2, [r3, #12]
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000904:	2201      	movs	r2, #1
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	4013      	ands	r3, r2
 8000912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	091b      	lsrs	r3, r3, #4
 800091a:	f003 0201 	and.w	r2, r3, #1
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	4313      	orrs	r3, r2
 8000928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	2203      	movs	r2, #3
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	4013      	ands	r3, r2
 8000946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	689a      	ldr	r2, [r3, #8]
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4313      	orrs	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2b02      	cmp	r3, #2
 8000966:	d003      	beq.n	8000970 <HAL_GPIO_Init+0xfc>
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b12      	cmp	r3, #18
 800096e:	d123      	bne.n	80009b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	08da      	lsrs	r2, r3, #3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3208      	adds	r2, #8
 8000978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800097c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	f003 0307 	and.w	r3, r3, #7
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	220f      	movs	r2, #15
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	4013      	ands	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	691a      	ldr	r2, [r3, #16]
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	08da      	lsrs	r2, r3, #3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3208      	adds	r2, #8
 80009b2:	69b9      	ldr	r1, [r7, #24]
 80009b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	2203      	movs	r2, #3
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	4013      	ands	r3, r2
 80009ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 0203 	and.w	r2, r3, #3
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	f000 80a2 	beq.w	8000b3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b56      	ldr	r3, [pc, #344]	; (8000b58 <HAL_GPIO_Init+0x2e4>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a55      	ldr	r2, [pc, #340]	; (8000b58 <HAL_GPIO_Init+0x2e4>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b53      	ldr	r3, [pc, #332]	; (8000b58 <HAL_GPIO_Init+0x2e4>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a16:	4a51      	ldr	r2, [pc, #324]	; (8000b5c <HAL_GPIO_Init+0x2e8>)
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	089b      	lsrs	r3, r3, #2
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	f003 0303 	and.w	r3, r3, #3
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	220f      	movs	r2, #15
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	4013      	ands	r3, r2
 8000a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a48      	ldr	r2, [pc, #288]	; (8000b60 <HAL_GPIO_Init+0x2ec>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d019      	beq.n	8000a76 <HAL_GPIO_Init+0x202>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a47      	ldr	r2, [pc, #284]	; (8000b64 <HAL_GPIO_Init+0x2f0>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d013      	beq.n	8000a72 <HAL_GPIO_Init+0x1fe>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a46      	ldr	r2, [pc, #280]	; (8000b68 <HAL_GPIO_Init+0x2f4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d00d      	beq.n	8000a6e <HAL_GPIO_Init+0x1fa>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a45      	ldr	r2, [pc, #276]	; (8000b6c <HAL_GPIO_Init+0x2f8>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d007      	beq.n	8000a6a <HAL_GPIO_Init+0x1f6>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a44      	ldr	r2, [pc, #272]	; (8000b70 <HAL_GPIO_Init+0x2fc>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d101      	bne.n	8000a66 <HAL_GPIO_Init+0x1f2>
 8000a62:	2304      	movs	r3, #4
 8000a64:	e008      	b.n	8000a78 <HAL_GPIO_Init+0x204>
 8000a66:	2307      	movs	r3, #7
 8000a68:	e006      	b.n	8000a78 <HAL_GPIO_Init+0x204>
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	e004      	b.n	8000a78 <HAL_GPIO_Init+0x204>
 8000a6e:	2302      	movs	r3, #2
 8000a70:	e002      	b.n	8000a78 <HAL_GPIO_Init+0x204>
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <HAL_GPIO_Init+0x204>
 8000a76:	2300      	movs	r3, #0
 8000a78:	69fa      	ldr	r2, [r7, #28]
 8000a7a:	f002 0203 	and.w	r2, r2, #3
 8000a7e:	0092      	lsls	r2, r2, #2
 8000a80:	4093      	lsls	r3, r2
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a88:	4934      	ldr	r1, [pc, #208]	; (8000b5c <HAL_GPIO_Init+0x2e8>)
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	089b      	lsrs	r3, r3, #2
 8000a8e:	3302      	adds	r3, #2
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a96:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <HAL_GPIO_Init+0x300>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000aba:	4a2e      	ldr	r2, [pc, #184]	; (8000b74 <HAL_GPIO_Init+0x300>)
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ac0:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <HAL_GPIO_Init+0x300>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	4013      	ands	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ae4:	4a23      	ldr	r2, [pc, #140]	; (8000b74 <HAL_GPIO_Init+0x300>)
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aea:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <HAL_GPIO_Init+0x300>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	43db      	mvns	r3, r3
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4013      	ands	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d003      	beq.n	8000b0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b0e:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <HAL_GPIO_Init+0x300>)
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_GPIO_Init+0x300>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	4013      	ands	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <HAL_GPIO_Init+0x300>)
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3301      	adds	r3, #1
 8000b42:	61fb      	str	r3, [r7, #28]
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	2b0f      	cmp	r3, #15
 8000b48:	f67f aea2 	bls.w	8000890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	3724      	adds	r7, #36	; 0x24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40013800 	.word	0x40013800
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40020400 	.word	0x40020400
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40013c00 	.word	0x40013c00

08000b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	691a      	ldr	r2, [r3, #16]
 8000b88:	887b      	ldrh	r3, [r7, #2]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d002      	beq.n	8000b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b90:	2301      	movs	r3, #1
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	e001      	b.n	8000b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bb8:	787b      	ldrb	r3, [r7, #1]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bbe:	887a      	ldrh	r2, [r7, #2]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bc4:	e003      	b.n	8000bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	041a      	lsls	r2, r3, #16
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	619a      	str	r2, [r3, #24]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	460b      	mov	r3, r1
 8000be4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	695a      	ldr	r2, [r3, #20]
 8000bea:	887b      	ldrh	r3, [r7, #2]
 8000bec:	401a      	ands	r2, r3
 8000bee:	887b      	ldrh	r3, [r7, #2]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d104      	bne.n	8000bfe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	041a      	lsls	r2, r3, #16
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000bfc:	e002      	b.n	8000c04 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000bfe:	887a      	ldrh	r2, [r7, #2]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	619a      	str	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e25b      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d075      	beq.n	8000d1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c2e:	4ba3      	ldr	r3, [pc, #652]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f003 030c 	and.w	r3, r3, #12
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d00c      	beq.n	8000c54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c3a:	4ba0      	ldr	r3, [pc, #640]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c42:	2b08      	cmp	r3, #8
 8000c44:	d112      	bne.n	8000c6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c46:	4b9d      	ldr	r3, [pc, #628]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c52:	d10b      	bne.n	8000c6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c54:	4b99      	ldr	r3, [pc, #612]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d05b      	beq.n	8000d18 <HAL_RCC_OscConfig+0x108>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d157      	bne.n	8000d18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e236      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c74:	d106      	bne.n	8000c84 <HAL_RCC_OscConfig+0x74>
 8000c76:	4b91      	ldr	r3, [pc, #580]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a90      	ldr	r2, [pc, #576]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	e01d      	b.n	8000cc0 <HAL_RCC_OscConfig+0xb0>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c8c:	d10c      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x98>
 8000c8e:	4b8b      	ldr	r3, [pc, #556]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a8a      	ldr	r2, [pc, #552]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	4b88      	ldr	r3, [pc, #544]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a87      	ldr	r2, [pc, #540]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	e00b      	b.n	8000cc0 <HAL_RCC_OscConfig+0xb0>
 8000ca8:	4b84      	ldr	r3, [pc, #528]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a83      	ldr	r2, [pc, #524]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b81      	ldr	r3, [pc, #516]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a80      	ldr	r2, [pc, #512]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d013      	beq.n	8000cf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fcc0 	bl	800064c <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cd0:	f7ff fcbc 	bl	800064c <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b64      	cmp	r3, #100	; 0x64
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e1fb      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce2:	4b76      	ldr	r3, [pc, #472]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f0      	beq.n	8000cd0 <HAL_RCC_OscConfig+0xc0>
 8000cee:	e014      	b.n	8000d1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf0:	f7ff fcac 	bl	800064c <HAL_GetTick>
 8000cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf6:	e008      	b.n	8000d0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cf8:	f7ff fca8 	bl	800064c <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b64      	cmp	r3, #100	; 0x64
 8000d04:	d901      	bls.n	8000d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e1e7      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d0a:	4b6c      	ldr	r3, [pc, #432]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1f0      	bne.n	8000cf8 <HAL_RCC_OscConfig+0xe8>
 8000d16:	e000      	b.n	8000d1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d063      	beq.n	8000dee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d26:	4b65      	ldr	r3, [pc, #404]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f003 030c 	and.w	r3, r3, #12
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00b      	beq.n	8000d4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d32:	4b62      	ldr	r3, [pc, #392]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d3a:	2b08      	cmp	r3, #8
 8000d3c:	d11c      	bne.n	8000d78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d3e:	4b5f      	ldr	r3, [pc, #380]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d116      	bne.n	8000d78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4a:	4b5c      	ldr	r3, [pc, #368]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d005      	beq.n	8000d62 <HAL_RCC_OscConfig+0x152>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d001      	beq.n	8000d62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e1bb      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d62:	4b56      	ldr	r3, [pc, #344]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	4952      	ldr	r1, [pc, #328]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000d72:	4313      	orrs	r3, r2
 8000d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d76:	e03a      	b.n	8000dee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d020      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d80:	4b4f      	ldr	r3, [pc, #316]	; (8000ec0 <HAL_RCC_OscConfig+0x2b0>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d86:	f7ff fc61 	bl	800064c <HAL_GetTick>
 8000d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d8c:	e008      	b.n	8000da0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d8e:	f7ff fc5d 	bl	800064c <HAL_GetTick>
 8000d92:	4602      	mov	r2, r0
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d901      	bls.n	8000da0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e19c      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da0:	4b46      	ldr	r3, [pc, #280]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0f0      	beq.n	8000d8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dac:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	4940      	ldr	r1, [pc, #256]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	600b      	str	r3, [r1, #0]
 8000dc0:	e015      	b.n	8000dee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dc2:	4b3f      	ldr	r3, [pc, #252]	; (8000ec0 <HAL_RCC_OscConfig+0x2b0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dc8:	f7ff fc40 	bl	800064c <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fc3c 	bl	800064c <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e17b      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de2:	4b36      	ldr	r3, [pc, #216]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1f0      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d030      	beq.n	8000e5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d016      	beq.n	8000e30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e02:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <HAL_RCC_OscConfig+0x2b4>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e08:	f7ff fc20 	bl	800064c <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e10:	f7ff fc1c 	bl	800064c <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e15b      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f0      	beq.n	8000e10 <HAL_RCC_OscConfig+0x200>
 8000e2e:	e015      	b.n	8000e5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e30:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <HAL_RCC_OscConfig+0x2b4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e36:	f7ff fc09 	bl	800064c <HAL_GetTick>
 8000e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e3c:	e008      	b.n	8000e50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e3e:	f7ff fc05 	bl	800064c <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d901      	bls.n	8000e50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e144      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e50:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1f0      	bne.n	8000e3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 80a0 	beq.w	8000faa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10f      	bne.n	8000e9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_RCC_OscConfig+0x2ac>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e96:	2301      	movs	r3, #1
 8000e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_RCC_OscConfig+0x2b8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d121      	bne.n	8000eea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_RCC_OscConfig+0x2b8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_RCC_OscConfig+0x2b8>)
 8000eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eb2:	f7ff fbcb 	bl	800064c <HAL_GetTick>
 8000eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb8:	e011      	b.n	8000ede <HAL_RCC_OscConfig+0x2ce>
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	42470000 	.word	0x42470000
 8000ec4:	42470e80 	.word	0x42470e80
 8000ec8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ecc:	f7ff fbbe 	bl	800064c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e0fd      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ede:	4b81      	ldr	r3, [pc, #516]	; (80010e4 <HAL_RCC_OscConfig+0x4d4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f0      	beq.n	8000ecc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d106      	bne.n	8000f00 <HAL_RCC_OscConfig+0x2f0>
 8000ef2:	4b7d      	ldr	r3, [pc, #500]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8000ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef6:	4a7c      	ldr	r2, [pc, #496]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6713      	str	r3, [r2, #112]	; 0x70
 8000efe:	e01c      	b.n	8000f3a <HAL_RCC_OscConfig+0x32a>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	2b05      	cmp	r3, #5
 8000f06:	d10c      	bne.n	8000f22 <HAL_RCC_OscConfig+0x312>
 8000f08:	4b77      	ldr	r3, [pc, #476]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8000f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f0c:	4a76      	ldr	r2, [pc, #472]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	6713      	str	r3, [r2, #112]	; 0x70
 8000f14:	4b74      	ldr	r3, [pc, #464]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8000f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f18:	4a73      	ldr	r2, [pc, #460]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f20:	e00b      	b.n	8000f3a <HAL_RCC_OscConfig+0x32a>
 8000f22:	4b71      	ldr	r3, [pc, #452]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8000f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f26:	4a70      	ldr	r2, [pc, #448]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f2e:	4b6e      	ldr	r3, [pc, #440]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8000f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f32:	4a6d      	ldr	r2, [pc, #436]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8000f34:	f023 0304 	bic.w	r3, r3, #4
 8000f38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d015      	beq.n	8000f6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f42:	f7ff fb83 	bl	800064c <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f48:	e00a      	b.n	8000f60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f4a:	f7ff fb7f 	bl	800064c <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e0bc      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f60:	4b61      	ldr	r3, [pc, #388]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8000f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0ee      	beq.n	8000f4a <HAL_RCC_OscConfig+0x33a>
 8000f6c:	e014      	b.n	8000f98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6e:	f7ff fb6d 	bl	800064c <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f74:	e00a      	b.n	8000f8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f76:	f7ff fb69 	bl	800064c <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e0a6      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f8c:	4b56      	ldr	r3, [pc, #344]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8000f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1ee      	bne.n	8000f76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f98:	7dfb      	ldrb	r3, [r7, #23]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d105      	bne.n	8000faa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f9e:	4b52      	ldr	r3, [pc, #328]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a51      	ldr	r2, [pc, #324]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8000fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 8092 	beq.w	80010d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fb4:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 030c 	and.w	r3, r3, #12
 8000fbc:	2b08      	cmp	r3, #8
 8000fbe:	d05c      	beq.n	800107a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d141      	bne.n	800104c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc8:	4b48      	ldr	r3, [pc, #288]	; (80010ec <HAL_RCC_OscConfig+0x4dc>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fce:	f7ff fb3d 	bl	800064c <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd6:	f7ff fb39 	bl	800064c <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e078      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe8:	4b3f      	ldr	r3, [pc, #252]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f0      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69da      	ldr	r2, [r3, #28]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001002:	019b      	lsls	r3, r3, #6
 8001004:	431a      	orrs	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100a:	085b      	lsrs	r3, r3, #1
 800100c:	3b01      	subs	r3, #1
 800100e:	041b      	lsls	r3, r3, #16
 8001010:	431a      	orrs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001016:	061b      	lsls	r3, r3, #24
 8001018:	4933      	ldr	r1, [pc, #204]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 800101a:	4313      	orrs	r3, r2
 800101c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800101e:	4b33      	ldr	r3, [pc, #204]	; (80010ec <HAL_RCC_OscConfig+0x4dc>)
 8001020:	2201      	movs	r2, #1
 8001022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fb12 	bl	800064c <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800102c:	f7ff fb0e 	bl	800064c <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e04d      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103e:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f0      	beq.n	800102c <HAL_RCC_OscConfig+0x41c>
 800104a:	e045      	b.n	80010d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <HAL_RCC_OscConfig+0x4dc>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001052:	f7ff fafb 	bl	800064c <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800105a:	f7ff faf7 	bl	800064c <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e036      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1f0      	bne.n	800105a <HAL_RCC_OscConfig+0x44a>
 8001078:	e02e      	b.n	80010d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d101      	bne.n	8001086 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e029      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_RCC_OscConfig+0x4d8>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	429a      	cmp	r2, r3
 8001098:	d11c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d115      	bne.n	80010d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010ae:	4013      	ands	r3, r2
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d10d      	bne.n	80010d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d106      	bne.n	80010d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d001      	beq.n	80010d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40007000 	.word	0x40007000
 80010e8:	40023800 	.word	0x40023800
 80010ec:	42470060 	.word	0x42470060

080010f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e0cc      	b.n	800129e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001104:	4b68      	ldr	r3, [pc, #416]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 030f 	and.w	r3, r3, #15
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d90c      	bls.n	800112c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001112:	4b65      	ldr	r3, [pc, #404]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800111a:	4b63      	ldr	r3, [pc, #396]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	429a      	cmp	r2, r3
 8001126:	d001      	beq.n	800112c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e0b8      	b.n	800129e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d020      	beq.n	800117a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001144:	4b59      	ldr	r3, [pc, #356]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	4a58      	ldr	r2, [pc, #352]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800114e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0308 	and.w	r3, r3, #8
 8001158:	2b00      	cmp	r3, #0
 800115a:	d005      	beq.n	8001168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	4a52      	ldr	r2, [pc, #328]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001168:	4b50      	ldr	r3, [pc, #320]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	494d      	ldr	r1, [pc, #308]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	4313      	orrs	r3, r2
 8001178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d044      	beq.n	8001210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d107      	bne.n	800119e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118e:	4b47      	ldr	r3, [pc, #284]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d119      	bne.n	80011ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e07f      	b.n	800129e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d003      	beq.n	80011ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d107      	bne.n	80011be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ae:	4b3f      	ldr	r3, [pc, #252]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d109      	bne.n	80011ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e06f      	b.n	800129e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011be:	4b3b      	ldr	r3, [pc, #236]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e067      	b.n	800129e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ce:	4b37      	ldr	r3, [pc, #220]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f023 0203 	bic.w	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	4934      	ldr	r1, [pc, #208]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011e0:	f7ff fa34 	bl	800064c <HAL_GetTick>
 80011e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e6:	e00a      	b.n	80011fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e8:	f7ff fa30 	bl	800064c <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e04f      	b.n	800129e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 020c 	and.w	r2, r3, #12
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	429a      	cmp	r2, r3
 800120e:	d1eb      	bne.n	80011e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001210:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d20c      	bcs.n	8001238 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121e:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e032      	b.n	800129e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d008      	beq.n	8001256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	4916      	ldr	r1, [pc, #88]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001252:	4313      	orrs	r3, r2
 8001254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d009      	beq.n	8001276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	490e      	ldr	r1, [pc, #56]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001272:	4313      	orrs	r3, r2
 8001274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001276:	f000 f821 	bl	80012bc <HAL_RCC_GetSysClockFreq>
 800127a:	4601      	mov	r1, r0
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	5cd3      	ldrb	r3, [r2, r3]
 800128a:	fa21 f303 	lsr.w	r3, r1, r3
 800128e:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f994 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023c00 	.word	0x40023c00
 80012ac:	40023800 	.word	0x40023800
 80012b0:	080058c0 	.word	0x080058c0
 80012b4:	20000070 	.word	0x20000070
 80012b8:	20000000 	.word	0x20000000

080012bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012d2:	4b63      	ldr	r3, [pc, #396]	; (8001460 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d007      	beq.n	80012ee <HAL_RCC_GetSysClockFreq+0x32>
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d008      	beq.n	80012f4 <HAL_RCC_GetSysClockFreq+0x38>
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f040 80b4 	bne.w	8001450 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012e8:	4b5e      	ldr	r3, [pc, #376]	; (8001464 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80012ea:	60bb      	str	r3, [r7, #8]
       break;
 80012ec:	e0b3      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012ee:	4b5e      	ldr	r3, [pc, #376]	; (8001468 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80012f0:	60bb      	str	r3, [r7, #8]
      break;
 80012f2:	e0b0      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012f4:	4b5a      	ldr	r3, [pc, #360]	; (8001460 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012fe:	4b58      	ldr	r3, [pc, #352]	; (8001460 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d04a      	beq.n	80013a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800130a:	4b55      	ldr	r3, [pc, #340]	; (8001460 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	099b      	lsrs	r3, r3, #6
 8001310:	f04f 0400 	mov.w	r4, #0
 8001314:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	ea03 0501 	and.w	r5, r3, r1
 8001320:	ea04 0602 	and.w	r6, r4, r2
 8001324:	4629      	mov	r1, r5
 8001326:	4632      	mov	r2, r6
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	f04f 0400 	mov.w	r4, #0
 8001330:	0154      	lsls	r4, r2, #5
 8001332:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001336:	014b      	lsls	r3, r1, #5
 8001338:	4619      	mov	r1, r3
 800133a:	4622      	mov	r2, r4
 800133c:	1b49      	subs	r1, r1, r5
 800133e:	eb62 0206 	sbc.w	r2, r2, r6
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	f04f 0400 	mov.w	r4, #0
 800134a:	0194      	lsls	r4, r2, #6
 800134c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001350:	018b      	lsls	r3, r1, #6
 8001352:	1a5b      	subs	r3, r3, r1
 8001354:	eb64 0402 	sbc.w	r4, r4, r2
 8001358:	f04f 0100 	mov.w	r1, #0
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	00e2      	lsls	r2, r4, #3
 8001362:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001366:	00d9      	lsls	r1, r3, #3
 8001368:	460b      	mov	r3, r1
 800136a:	4614      	mov	r4, r2
 800136c:	195b      	adds	r3, r3, r5
 800136e:	eb44 0406 	adc.w	r4, r4, r6
 8001372:	f04f 0100 	mov.w	r1, #0
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	0262      	lsls	r2, r4, #9
 800137c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001380:	0259      	lsls	r1, r3, #9
 8001382:	460b      	mov	r3, r1
 8001384:	4614      	mov	r4, r2
 8001386:	4618      	mov	r0, r3
 8001388:	4621      	mov	r1, r4
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f04f 0400 	mov.w	r4, #0
 8001390:	461a      	mov	r2, r3
 8001392:	4623      	mov	r3, r4
 8001394:	f7fe ff74 	bl	8000280 <__aeabi_uldivmod>
 8001398:	4603      	mov	r3, r0
 800139a:	460c      	mov	r4, r1
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	e049      	b.n	8001434 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013a0:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	099b      	lsrs	r3, r3, #6
 80013a6:	f04f 0400 	mov.w	r4, #0
 80013aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	ea03 0501 	and.w	r5, r3, r1
 80013b6:	ea04 0602 	and.w	r6, r4, r2
 80013ba:	4629      	mov	r1, r5
 80013bc:	4632      	mov	r2, r6
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	f04f 0400 	mov.w	r4, #0
 80013c6:	0154      	lsls	r4, r2, #5
 80013c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013cc:	014b      	lsls	r3, r1, #5
 80013ce:	4619      	mov	r1, r3
 80013d0:	4622      	mov	r2, r4
 80013d2:	1b49      	subs	r1, r1, r5
 80013d4:	eb62 0206 	sbc.w	r2, r2, r6
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	f04f 0400 	mov.w	r4, #0
 80013e0:	0194      	lsls	r4, r2, #6
 80013e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013e6:	018b      	lsls	r3, r1, #6
 80013e8:	1a5b      	subs	r3, r3, r1
 80013ea:	eb64 0402 	sbc.w	r4, r4, r2
 80013ee:	f04f 0100 	mov.w	r1, #0
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	00e2      	lsls	r2, r4, #3
 80013f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013fc:	00d9      	lsls	r1, r3, #3
 80013fe:	460b      	mov	r3, r1
 8001400:	4614      	mov	r4, r2
 8001402:	195b      	adds	r3, r3, r5
 8001404:	eb44 0406 	adc.w	r4, r4, r6
 8001408:	f04f 0100 	mov.w	r1, #0
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	02a2      	lsls	r2, r4, #10
 8001412:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001416:	0299      	lsls	r1, r3, #10
 8001418:	460b      	mov	r3, r1
 800141a:	4614      	mov	r4, r2
 800141c:	4618      	mov	r0, r3
 800141e:	4621      	mov	r1, r4
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f04f 0400 	mov.w	r4, #0
 8001426:	461a      	mov	r2, r3
 8001428:	4623      	mov	r3, r4
 800142a:	f7fe ff29 	bl	8000280 <__aeabi_uldivmod>
 800142e:	4603      	mov	r3, r0
 8001430:	460c      	mov	r4, r1
 8001432:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	0c1b      	lsrs	r3, r3, #16
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	3301      	adds	r3, #1
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	fbb2 f3f3 	udiv	r3, r2, r3
 800144c:	60bb      	str	r3, [r7, #8]
      break;
 800144e:	e002      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001452:	60bb      	str	r3, [r7, #8]
      break;
 8001454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001456:	68bb      	ldr	r3, [r7, #8]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	00f42400 	.word	0x00f42400
 8001468:	007a1200 	.word	0x007a1200

0800146c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <HAL_RCC_GetHCLKFreq+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000070 	.word	0x20000070

08001484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001488:	f7ff fff0 	bl	800146c <HAL_RCC_GetHCLKFreq>
 800148c:	4601      	mov	r1, r0
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	0a9b      	lsrs	r3, r3, #10
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	4a03      	ldr	r2, [pc, #12]	; (80014a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800149a:	5cd3      	ldrb	r3, [r2, r3]
 800149c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	080058d0 	.word	0x080058d0

080014ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014b0:	f7ff ffdc 	bl	800146c <HAL_RCC_GetHCLKFreq>
 80014b4:	4601      	mov	r1, r0
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	0b5b      	lsrs	r3, r3, #13
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	080058d0 	.word	0x080058d0

080014d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e03f      	b.n	8001566 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f003 fc60 	bl	8004dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2224      	movs	r2, #36	; 0x24
 8001504:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001516:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f90b 	bl	8001734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800152c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	695a      	ldr	r2, [r3, #20]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800153c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800154c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2220      	movs	r2, #32
 8001558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2220      	movs	r2, #32
 8001560:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b088      	sub	sp, #32
 8001572:	af02      	add	r7, sp, #8
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	4613      	mov	r3, r2
 800157c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b20      	cmp	r3, #32
 800158c:	f040 8083 	bne.w	8001696 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_UART_Transmit+0x2e>
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e07b      	b.n	8001698 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <HAL_UART_Transmit+0x40>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e074      	b.n	8001698 <HAL_UART_Transmit+0x12a>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2221      	movs	r2, #33	; 0x21
 80015c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80015c4:	f7ff f842 	bl	800064c <HAL_GetTick>
 80015c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	88fa      	ldrh	r2, [r7, #6]
 80015ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	88fa      	ldrh	r2, [r7, #6]
 80015d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80015de:	e042      	b.n	8001666 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015f6:	d122      	bne.n	800163e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	2200      	movs	r2, #0
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 f84c 	bl	80016a0 <UART_WaitOnFlagUntilTimeout>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e042      	b.n	8001698 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001624:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d103      	bne.n	8001636 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	3302      	adds	r3, #2
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	e017      	b.n	8001666 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3301      	adds	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	e013      	b.n	8001666 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	2200      	movs	r2, #0
 8001646:	2180      	movs	r1, #128	; 0x80
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 f829 	bl	80016a0 <UART_WaitOnFlagUntilTimeout>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e01f      	b.n	8001698 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	60ba      	str	r2, [r7, #8]
 800165e:	781a      	ldrb	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800166a:	b29b      	uxth	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1b7      	bne.n	80015e0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2200      	movs	r2, #0
 8001678:	2140      	movs	r1, #64	; 0x40
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 f810 	bl	80016a0 <UART_WaitOnFlagUntilTimeout>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e006      	b.n	8001698 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2220      	movs	r2, #32
 800168e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001696:	2302      	movs	r3, #2
  }
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	4613      	mov	r3, r2
 80016ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016b0:	e02c      	b.n	800170c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b8:	d028      	beq.n	800170c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d007      	beq.n	80016d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80016c0:	f7fe ffc4 	bl	800064c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d21d      	bcs.n	800170c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80016de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2220      	movs	r2, #32
 80016f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2220      	movs	r2, #32
 80016fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e00f      	b.n	800172c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	4013      	ands	r3, r2
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	429a      	cmp	r2, r3
 800171a:	bf0c      	ite	eq
 800171c:	2301      	moveq	r3, #1
 800171e:	2300      	movne	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	429a      	cmp	r2, r3
 8001728:	d0c3      	beq.n	80016b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001738:	b085      	sub	sp, #20
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	4313      	orrs	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001776:	f023 030c 	bic.w	r3, r3, #12
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	68f9      	ldr	r1, [r7, #12]
 8001780:	430b      	orrs	r3, r1
 8001782:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699a      	ldr	r2, [r3, #24]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017a2:	f040 818b 	bne.w	8001abc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4ac1      	ldr	r2, [pc, #772]	; (8001ab0 <UART_SetConfig+0x37c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d005      	beq.n	80017bc <UART_SetConfig+0x88>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4abf      	ldr	r2, [pc, #764]	; (8001ab4 <UART_SetConfig+0x380>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	f040 80bd 	bne.w	8001936 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80017bc:	f7ff fe76 	bl	80014ac <HAL_RCC_GetPCLK2Freq>
 80017c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	461d      	mov	r5, r3
 80017c6:	f04f 0600 	mov.w	r6, #0
 80017ca:	46a8      	mov	r8, r5
 80017cc:	46b1      	mov	r9, r6
 80017ce:	eb18 0308 	adds.w	r3, r8, r8
 80017d2:	eb49 0409 	adc.w	r4, r9, r9
 80017d6:	4698      	mov	r8, r3
 80017d8:	46a1      	mov	r9, r4
 80017da:	eb18 0805 	adds.w	r8, r8, r5
 80017de:	eb49 0906 	adc.w	r9, r9, r6
 80017e2:	f04f 0100 	mov.w	r1, #0
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80017ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80017f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80017f6:	4688      	mov	r8, r1
 80017f8:	4691      	mov	r9, r2
 80017fa:	eb18 0005 	adds.w	r0, r8, r5
 80017fe:	eb49 0106 	adc.w	r1, r9, r6
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	461d      	mov	r5, r3
 8001808:	f04f 0600 	mov.w	r6, #0
 800180c:	196b      	adds	r3, r5, r5
 800180e:	eb46 0406 	adc.w	r4, r6, r6
 8001812:	461a      	mov	r2, r3
 8001814:	4623      	mov	r3, r4
 8001816:	f7fe fd33 	bl	8000280 <__aeabi_uldivmod>
 800181a:	4603      	mov	r3, r0
 800181c:	460c      	mov	r4, r1
 800181e:	461a      	mov	r2, r3
 8001820:	4ba5      	ldr	r3, [pc, #660]	; (8001ab8 <UART_SetConfig+0x384>)
 8001822:	fba3 2302 	umull	r2, r3, r3, r2
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	461d      	mov	r5, r3
 8001830:	f04f 0600 	mov.w	r6, #0
 8001834:	46a9      	mov	r9, r5
 8001836:	46b2      	mov	sl, r6
 8001838:	eb19 0309 	adds.w	r3, r9, r9
 800183c:	eb4a 040a 	adc.w	r4, sl, sl
 8001840:	4699      	mov	r9, r3
 8001842:	46a2      	mov	sl, r4
 8001844:	eb19 0905 	adds.w	r9, r9, r5
 8001848:	eb4a 0a06 	adc.w	sl, sl, r6
 800184c:	f04f 0100 	mov.w	r1, #0
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001858:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800185c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001860:	4689      	mov	r9, r1
 8001862:	4692      	mov	sl, r2
 8001864:	eb19 0005 	adds.w	r0, r9, r5
 8001868:	eb4a 0106 	adc.w	r1, sl, r6
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	461d      	mov	r5, r3
 8001872:	f04f 0600 	mov.w	r6, #0
 8001876:	196b      	adds	r3, r5, r5
 8001878:	eb46 0406 	adc.w	r4, r6, r6
 800187c:	461a      	mov	r2, r3
 800187e:	4623      	mov	r3, r4
 8001880:	f7fe fcfe 	bl	8000280 <__aeabi_uldivmod>
 8001884:	4603      	mov	r3, r0
 8001886:	460c      	mov	r4, r1
 8001888:	461a      	mov	r2, r3
 800188a:	4b8b      	ldr	r3, [pc, #556]	; (8001ab8 <UART_SetConfig+0x384>)
 800188c:	fba3 1302 	umull	r1, r3, r3, r2
 8001890:	095b      	lsrs	r3, r3, #5
 8001892:	2164      	movs	r1, #100	; 0x64
 8001894:	fb01 f303 	mul.w	r3, r1, r3
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	3332      	adds	r3, #50	; 0x32
 800189e:	4a86      	ldr	r2, [pc, #536]	; (8001ab8 <UART_SetConfig+0x384>)
 80018a0:	fba2 2303 	umull	r2, r3, r2, r3
 80018a4:	095b      	lsrs	r3, r3, #5
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80018ac:	4498      	add	r8, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	461d      	mov	r5, r3
 80018b2:	f04f 0600 	mov.w	r6, #0
 80018b6:	46a9      	mov	r9, r5
 80018b8:	46b2      	mov	sl, r6
 80018ba:	eb19 0309 	adds.w	r3, r9, r9
 80018be:	eb4a 040a 	adc.w	r4, sl, sl
 80018c2:	4699      	mov	r9, r3
 80018c4:	46a2      	mov	sl, r4
 80018c6:	eb19 0905 	adds.w	r9, r9, r5
 80018ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80018ce:	f04f 0100 	mov.w	r1, #0
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80018de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80018e2:	4689      	mov	r9, r1
 80018e4:	4692      	mov	sl, r2
 80018e6:	eb19 0005 	adds.w	r0, r9, r5
 80018ea:	eb4a 0106 	adc.w	r1, sl, r6
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	461d      	mov	r5, r3
 80018f4:	f04f 0600 	mov.w	r6, #0
 80018f8:	196b      	adds	r3, r5, r5
 80018fa:	eb46 0406 	adc.w	r4, r6, r6
 80018fe:	461a      	mov	r2, r3
 8001900:	4623      	mov	r3, r4
 8001902:	f7fe fcbd 	bl	8000280 <__aeabi_uldivmod>
 8001906:	4603      	mov	r3, r0
 8001908:	460c      	mov	r4, r1
 800190a:	461a      	mov	r2, r3
 800190c:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <UART_SetConfig+0x384>)
 800190e:	fba3 1302 	umull	r1, r3, r3, r2
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	2164      	movs	r1, #100	; 0x64
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	3332      	adds	r3, #50	; 0x32
 8001920:	4a65      	ldr	r2, [pc, #404]	; (8001ab8 <UART_SetConfig+0x384>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	f003 0207 	and.w	r2, r3, #7
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4442      	add	r2, r8
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	e26f      	b.n	8001e16 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001936:	f7ff fda5 	bl	8001484 <HAL_RCC_GetPCLK1Freq>
 800193a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	461d      	mov	r5, r3
 8001940:	f04f 0600 	mov.w	r6, #0
 8001944:	46a8      	mov	r8, r5
 8001946:	46b1      	mov	r9, r6
 8001948:	eb18 0308 	adds.w	r3, r8, r8
 800194c:	eb49 0409 	adc.w	r4, r9, r9
 8001950:	4698      	mov	r8, r3
 8001952:	46a1      	mov	r9, r4
 8001954:	eb18 0805 	adds.w	r8, r8, r5
 8001958:	eb49 0906 	adc.w	r9, r9, r6
 800195c:	f04f 0100 	mov.w	r1, #0
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001968:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800196c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001970:	4688      	mov	r8, r1
 8001972:	4691      	mov	r9, r2
 8001974:	eb18 0005 	adds.w	r0, r8, r5
 8001978:	eb49 0106 	adc.w	r1, r9, r6
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	461d      	mov	r5, r3
 8001982:	f04f 0600 	mov.w	r6, #0
 8001986:	196b      	adds	r3, r5, r5
 8001988:	eb46 0406 	adc.w	r4, r6, r6
 800198c:	461a      	mov	r2, r3
 800198e:	4623      	mov	r3, r4
 8001990:	f7fe fc76 	bl	8000280 <__aeabi_uldivmod>
 8001994:	4603      	mov	r3, r0
 8001996:	460c      	mov	r4, r1
 8001998:	461a      	mov	r2, r3
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <UART_SetConfig+0x384>)
 800199c:	fba3 2302 	umull	r2, r3, r3, r2
 80019a0:	095b      	lsrs	r3, r3, #5
 80019a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	461d      	mov	r5, r3
 80019aa:	f04f 0600 	mov.w	r6, #0
 80019ae:	46a9      	mov	r9, r5
 80019b0:	46b2      	mov	sl, r6
 80019b2:	eb19 0309 	adds.w	r3, r9, r9
 80019b6:	eb4a 040a 	adc.w	r4, sl, sl
 80019ba:	4699      	mov	r9, r3
 80019bc:	46a2      	mov	sl, r4
 80019be:	eb19 0905 	adds.w	r9, r9, r5
 80019c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80019c6:	f04f 0100 	mov.w	r1, #0
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80019d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80019da:	4689      	mov	r9, r1
 80019dc:	4692      	mov	sl, r2
 80019de:	eb19 0005 	adds.w	r0, r9, r5
 80019e2:	eb4a 0106 	adc.w	r1, sl, r6
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	461d      	mov	r5, r3
 80019ec:	f04f 0600 	mov.w	r6, #0
 80019f0:	196b      	adds	r3, r5, r5
 80019f2:	eb46 0406 	adc.w	r4, r6, r6
 80019f6:	461a      	mov	r2, r3
 80019f8:	4623      	mov	r3, r4
 80019fa:	f7fe fc41 	bl	8000280 <__aeabi_uldivmod>
 80019fe:	4603      	mov	r3, r0
 8001a00:	460c      	mov	r4, r1
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b2c      	ldr	r3, [pc, #176]	; (8001ab8 <UART_SetConfig+0x384>)
 8001a06:	fba3 1302 	umull	r1, r3, r3, r2
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2164      	movs	r1, #100	; 0x64
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	3332      	adds	r3, #50	; 0x32
 8001a18:	4a27      	ldr	r2, [pc, #156]	; (8001ab8 <UART_SetConfig+0x384>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001a26:	4498      	add	r8, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	461d      	mov	r5, r3
 8001a2c:	f04f 0600 	mov.w	r6, #0
 8001a30:	46a9      	mov	r9, r5
 8001a32:	46b2      	mov	sl, r6
 8001a34:	eb19 0309 	adds.w	r3, r9, r9
 8001a38:	eb4a 040a 	adc.w	r4, sl, sl
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	46a2      	mov	sl, r4
 8001a40:	eb19 0905 	adds.w	r9, r9, r5
 8001a44:	eb4a 0a06 	adc.w	sl, sl, r6
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001a58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001a5c:	4689      	mov	r9, r1
 8001a5e:	4692      	mov	sl, r2
 8001a60:	eb19 0005 	adds.w	r0, r9, r5
 8001a64:	eb4a 0106 	adc.w	r1, sl, r6
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	461d      	mov	r5, r3
 8001a6e:	f04f 0600 	mov.w	r6, #0
 8001a72:	196b      	adds	r3, r5, r5
 8001a74:	eb46 0406 	adc.w	r4, r6, r6
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	f7fe fc00 	bl	8000280 <__aeabi_uldivmod>
 8001a80:	4603      	mov	r3, r0
 8001a82:	460c      	mov	r4, r1
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <UART_SetConfig+0x384>)
 8001a88:	fba3 1302 	umull	r1, r3, r3, r2
 8001a8c:	095b      	lsrs	r3, r3, #5
 8001a8e:	2164      	movs	r1, #100	; 0x64
 8001a90:	fb01 f303 	mul.w	r3, r1, r3
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	3332      	adds	r3, #50	; 0x32
 8001a9a:	4a07      	ldr	r2, [pc, #28]	; (8001ab8 <UART_SetConfig+0x384>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	095b      	lsrs	r3, r3, #5
 8001aa2:	f003 0207 	and.w	r2, r3, #7
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4442      	add	r2, r8
 8001aac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001aae:	e1b2      	b.n	8001e16 <UART_SetConfig+0x6e2>
 8001ab0:	40011000 	.word	0x40011000
 8001ab4:	40011400 	.word	0x40011400
 8001ab8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4ad7      	ldr	r2, [pc, #860]	; (8001e20 <UART_SetConfig+0x6ec>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d005      	beq.n	8001ad2 <UART_SetConfig+0x39e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4ad6      	ldr	r2, [pc, #856]	; (8001e24 <UART_SetConfig+0x6f0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	f040 80d1 	bne.w	8001c74 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ad2:	f7ff fceb 	bl	80014ac <HAL_RCC_GetPCLK2Freq>
 8001ad6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	469a      	mov	sl, r3
 8001adc:	f04f 0b00 	mov.w	fp, #0
 8001ae0:	46d0      	mov	r8, sl
 8001ae2:	46d9      	mov	r9, fp
 8001ae4:	eb18 0308 	adds.w	r3, r8, r8
 8001ae8:	eb49 0409 	adc.w	r4, r9, r9
 8001aec:	4698      	mov	r8, r3
 8001aee:	46a1      	mov	r9, r4
 8001af0:	eb18 080a 	adds.w	r8, r8, sl
 8001af4:	eb49 090b 	adc.w	r9, r9, fp
 8001af8:	f04f 0100 	mov.w	r1, #0
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001b04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001b08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001b0c:	4688      	mov	r8, r1
 8001b0e:	4691      	mov	r9, r2
 8001b10:	eb1a 0508 	adds.w	r5, sl, r8
 8001b14:	eb4b 0609 	adc.w	r6, fp, r9
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	f04f 0400 	mov.w	r4, #0
 8001b2a:	0094      	lsls	r4, r2, #2
 8001b2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001b30:	008b      	lsls	r3, r1, #2
 8001b32:	461a      	mov	r2, r3
 8001b34:	4623      	mov	r3, r4
 8001b36:	4628      	mov	r0, r5
 8001b38:	4631      	mov	r1, r6
 8001b3a:	f7fe fba1 	bl	8000280 <__aeabi_uldivmod>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460c      	mov	r4, r1
 8001b42:	461a      	mov	r2, r3
 8001b44:	4bb8      	ldr	r3, [pc, #736]	; (8001e28 <UART_SetConfig+0x6f4>)
 8001b46:	fba3 2302 	umull	r2, r3, r3, r2
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	469b      	mov	fp, r3
 8001b54:	f04f 0c00 	mov.w	ip, #0
 8001b58:	46d9      	mov	r9, fp
 8001b5a:	46e2      	mov	sl, ip
 8001b5c:	eb19 0309 	adds.w	r3, r9, r9
 8001b60:	eb4a 040a 	adc.w	r4, sl, sl
 8001b64:	4699      	mov	r9, r3
 8001b66:	46a2      	mov	sl, r4
 8001b68:	eb19 090b 	adds.w	r9, r9, fp
 8001b6c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001b70:	f04f 0100 	mov.w	r1, #0
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001b80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001b84:	4689      	mov	r9, r1
 8001b86:	4692      	mov	sl, r2
 8001b88:	eb1b 0509 	adds.w	r5, fp, r9
 8001b8c:	eb4c 060a 	adc.w	r6, ip, sl
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	f04f 0400 	mov.w	r4, #0
 8001ba2:	0094      	lsls	r4, r2, #2
 8001ba4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001ba8:	008b      	lsls	r3, r1, #2
 8001baa:	461a      	mov	r2, r3
 8001bac:	4623      	mov	r3, r4
 8001bae:	4628      	mov	r0, r5
 8001bb0:	4631      	mov	r1, r6
 8001bb2:	f7fe fb65 	bl	8000280 <__aeabi_uldivmod>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	460c      	mov	r4, r1
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b9a      	ldr	r3, [pc, #616]	; (8001e28 <UART_SetConfig+0x6f4>)
 8001bbe:	fba3 1302 	umull	r1, r3, r3, r2
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2164      	movs	r1, #100	; 0x64
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	3332      	adds	r3, #50	; 0x32
 8001bd0:	4a95      	ldr	r2, [pc, #596]	; (8001e28 <UART_SetConfig+0x6f4>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bdc:	4498      	add	r8, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	469b      	mov	fp, r3
 8001be2:	f04f 0c00 	mov.w	ip, #0
 8001be6:	46d9      	mov	r9, fp
 8001be8:	46e2      	mov	sl, ip
 8001bea:	eb19 0309 	adds.w	r3, r9, r9
 8001bee:	eb4a 040a 	adc.w	r4, sl, sl
 8001bf2:	4699      	mov	r9, r3
 8001bf4:	46a2      	mov	sl, r4
 8001bf6:	eb19 090b 	adds.w	r9, r9, fp
 8001bfa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001bfe:	f04f 0100 	mov.w	r1, #0
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001c0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001c12:	4689      	mov	r9, r1
 8001c14:	4692      	mov	sl, r2
 8001c16:	eb1b 0509 	adds.w	r5, fp, r9
 8001c1a:	eb4c 060a 	adc.w	r6, ip, sl
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4619      	mov	r1, r3
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	f04f 0400 	mov.w	r4, #0
 8001c30:	0094      	lsls	r4, r2, #2
 8001c32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001c36:	008b      	lsls	r3, r1, #2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	4631      	mov	r1, r6
 8001c40:	f7fe fb1e 	bl	8000280 <__aeabi_uldivmod>
 8001c44:	4603      	mov	r3, r0
 8001c46:	460c      	mov	r4, r1
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b77      	ldr	r3, [pc, #476]	; (8001e28 <UART_SetConfig+0x6f4>)
 8001c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8001c50:	095b      	lsrs	r3, r3, #5
 8001c52:	2164      	movs	r1, #100	; 0x64
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	3332      	adds	r3, #50	; 0x32
 8001c5e:	4a72      	ldr	r2, [pc, #456]	; (8001e28 <UART_SetConfig+0x6f4>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	095b      	lsrs	r3, r3, #5
 8001c66:	f003 020f 	and.w	r2, r3, #15
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4442      	add	r2, r8
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	e0d0      	b.n	8001e16 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c74:	f7ff fc06 	bl	8001484 <HAL_RCC_GetPCLK1Freq>
 8001c78:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	469a      	mov	sl, r3
 8001c7e:	f04f 0b00 	mov.w	fp, #0
 8001c82:	46d0      	mov	r8, sl
 8001c84:	46d9      	mov	r9, fp
 8001c86:	eb18 0308 	adds.w	r3, r8, r8
 8001c8a:	eb49 0409 	adc.w	r4, r9, r9
 8001c8e:	4698      	mov	r8, r3
 8001c90:	46a1      	mov	r9, r4
 8001c92:	eb18 080a 	adds.w	r8, r8, sl
 8001c96:	eb49 090b 	adc.w	r9, r9, fp
 8001c9a:	f04f 0100 	mov.w	r1, #0
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001ca6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001caa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001cae:	4688      	mov	r8, r1
 8001cb0:	4691      	mov	r9, r2
 8001cb2:	eb1a 0508 	adds.w	r5, sl, r8
 8001cb6:	eb4b 0609 	adc.w	r6, fp, r9
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	f04f 0400 	mov.w	r4, #0
 8001ccc:	0094      	lsls	r4, r2, #2
 8001cce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001cd2:	008b      	lsls	r3, r1, #2
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4623      	mov	r3, r4
 8001cd8:	4628      	mov	r0, r5
 8001cda:	4631      	mov	r1, r6
 8001cdc:	f7fe fad0 	bl	8000280 <__aeabi_uldivmod>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <UART_SetConfig+0x6f4>)
 8001ce8:	fba3 2302 	umull	r2, r3, r3, r2
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	469b      	mov	fp, r3
 8001cf6:	f04f 0c00 	mov.w	ip, #0
 8001cfa:	46d9      	mov	r9, fp
 8001cfc:	46e2      	mov	sl, ip
 8001cfe:	eb19 0309 	adds.w	r3, r9, r9
 8001d02:	eb4a 040a 	adc.w	r4, sl, sl
 8001d06:	4699      	mov	r9, r3
 8001d08:	46a2      	mov	sl, r4
 8001d0a:	eb19 090b 	adds.w	r9, r9, fp
 8001d0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001d12:	f04f 0100 	mov.w	r1, #0
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001d22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001d26:	4689      	mov	r9, r1
 8001d28:	4692      	mov	sl, r2
 8001d2a:	eb1b 0509 	adds.w	r5, fp, r9
 8001d2e:	eb4c 060a 	adc.w	r6, ip, sl
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	f04f 0400 	mov.w	r4, #0
 8001d44:	0094      	lsls	r4, r2, #2
 8001d46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001d4a:	008b      	lsls	r3, r1, #2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4623      	mov	r3, r4
 8001d50:	4628      	mov	r0, r5
 8001d52:	4631      	mov	r1, r6
 8001d54:	f7fe fa94 	bl	8000280 <__aeabi_uldivmod>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	460c      	mov	r4, r1
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <UART_SetConfig+0x6f4>)
 8001d60:	fba3 1302 	umull	r1, r3, r3, r2
 8001d64:	095b      	lsrs	r3, r3, #5
 8001d66:	2164      	movs	r1, #100	; 0x64
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	3332      	adds	r3, #50	; 0x32
 8001d72:	4a2d      	ldr	r2, [pc, #180]	; (8001e28 <UART_SetConfig+0x6f4>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d7e:	4498      	add	r8, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	469b      	mov	fp, r3
 8001d84:	f04f 0c00 	mov.w	ip, #0
 8001d88:	46d9      	mov	r9, fp
 8001d8a:	46e2      	mov	sl, ip
 8001d8c:	eb19 0309 	adds.w	r3, r9, r9
 8001d90:	eb4a 040a 	adc.w	r4, sl, sl
 8001d94:	4699      	mov	r9, r3
 8001d96:	46a2      	mov	sl, r4
 8001d98:	eb19 090b 	adds.w	r9, r9, fp
 8001d9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001da0:	f04f 0100 	mov.w	r1, #0
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001db0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001db4:	4689      	mov	r9, r1
 8001db6:	4692      	mov	sl, r2
 8001db8:	eb1b 0509 	adds.w	r5, fp, r9
 8001dbc:	eb4c 060a 	adc.w	r6, ip, sl
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	f04f 0400 	mov.w	r4, #0
 8001dd2:	0094      	lsls	r4, r2, #2
 8001dd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001dd8:	008b      	lsls	r3, r1, #2
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4623      	mov	r3, r4
 8001dde:	4628      	mov	r0, r5
 8001de0:	4631      	mov	r1, r6
 8001de2:	f7fe fa4d 	bl	8000280 <__aeabi_uldivmod>
 8001de6:	4603      	mov	r3, r0
 8001de8:	460c      	mov	r4, r1
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <UART_SetConfig+0x6f4>)
 8001dee:	fba3 1302 	umull	r1, r3, r3, r2
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	2164      	movs	r1, #100	; 0x64
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	3332      	adds	r3, #50	; 0x32
 8001e00:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <UART_SetConfig+0x6f4>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	f003 020f 	and.w	r2, r3, #15
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4442      	add	r2, r8
 8001e12:	609a      	str	r2, [r3, #8]
}
 8001e14:	e7ff      	b.n	8001e16 <UART_SetConfig+0x6e2>
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e20:	40011000 	.word	0x40011000
 8001e24:	40011400 	.word	0x40011400
 8001e28:	51eb851f 	.word	0x51eb851f

08001e2c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e3e:	2b84      	cmp	r3, #132	; 0x84
 8001e40:	d005      	beq.n	8001e4e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001e42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4413      	add	r3, r2
 8001e4a:	3303      	adds	r3, #3
 8001e4c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e62:	f3ef 8305 	mrs	r3, IPSR
 8001e66:	607b      	str	r3, [r7, #4]
  return(result);
 8001e68:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bf14      	ite	ne
 8001e6e:	2301      	movne	r3, #1
 8001e70:	2300      	moveq	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001e84:	f001 f81c 	bl	8002ec0 <vTaskStartScheduler>
  
  return osOK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e90:	b089      	sub	sp, #36	; 0x24
 8001e92:	af04      	add	r7, sp, #16
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d020      	beq.n	8001ee2 <osThreadCreate+0x54>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01c      	beq.n	8001ee2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685c      	ldr	r4, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681d      	ldr	r5, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691e      	ldr	r6, [r3, #16]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ffb6 	bl	8001e2c <makeFreeRtosPriority>
 8001ec0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001eca:	9202      	str	r2, [sp, #8]
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	9100      	str	r1, [sp, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4632      	mov	r2, r6
 8001ed4:	4629      	mov	r1, r5
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f000 fe38 	bl	8002b4c <xTaskCreateStatic>
 8001edc:	4603      	mov	r3, r0
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e01c      	b.n	8001f1c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685c      	ldr	r4, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001eee:	b29e      	uxth	r6, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff98 	bl	8001e2c <makeFreeRtosPriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f107 030c 	add.w	r3, r7, #12
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	9200      	str	r2, [sp, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	4632      	mov	r2, r6
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f000 fe76 	bl	8002bfe <xTaskCreate>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d001      	beq.n	8001f1c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	e000      	b.n	8001f1e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f26 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b084      	sub	sp, #16
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <osDelay+0x16>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	e000      	b.n	8001f3e <osDelay+0x18>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 ff8a 	bl	8002e58 <vTaskDelay>
  
  return osOK;
 8001f44:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d013      	beq.n	8001f8e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8001f66:	7afb      	ldrb	r3, [r7, #11]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <osTimerCreate+0x20>
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	e000      	b.n	8001f72 <osTimerCreate+0x22>
 8001f70:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8001f7a:	9201      	str	r2, [sp, #4]
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	460a      	mov	r2, r1
 8001f82:	2101      	movs	r1, #1
 8001f84:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <osTimerCreate+0x64>)
 8001f86:	f001 fd4a 	bl	8003a1e <xTimerCreateStatic>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	e00e      	b.n	8001fac <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <osTimerCreate+0x48>
 8001f94:	2201      	movs	r2, #1
 8001f96:	e000      	b.n	8001f9a <osTimerCreate+0x4a>
 8001f98:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <osTimerCreate+0x64>)
 8001fa6:	f001 fd19 	bl	80039dc <xTimerCreate>
 8001faa:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	0800586c 	.word	0x0800586c

08001fb8 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <osTimerStart+0x20>
    ticks = 1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8001fd8:	f7ff ff40 	bl	8001e5c <inHandlerMode>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01b      	beq.n	800201a <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8001fe2:	f107 020c 	add.w	r2, r7, #12
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	4613      	mov	r3, r2
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	2109      	movs	r1, #9
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f001 fd81 	bl	8003af8 <xTimerGenericCommand>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d002      	beq.n	8002002 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8001ffc:	23ff      	movs	r3, #255	; 0xff
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	e018      	b.n	8002034 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d015      	beq.n	8002034 <osTimerStart+0x7c>
 8002008:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <osTimerStart+0x88>)
 800200a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	e00c      	b.n	8002034 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800201a:	2300      	movs	r3, #0
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2300      	movs	r3, #0
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	2104      	movs	r1, #4
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f001 fd67 	bl	8003af8 <xTimerGenericCommand>
 800202a:	4603      	mov	r3, r0
 800202c:	2b01      	cmp	r3, #1
 800202e:	d001      	beq.n	8002034 <osTimerStart+0x7c>
      result = osErrorOS;
 8002030:	23ff      	movs	r3, #255	; 0xff
 8002032:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8002034:	697b      	ldr	r3, [r7, #20]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	e000ed04 	.word	0xe000ed04

08002044 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f103 0208 	add.w	r2, r3, #8
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f04f 32ff 	mov.w	r2, #4294967295
 800205c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f103 0208 	add.w	r2, r3, #8
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f103 0208 	add.w	r2, r3, #8
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800209e:	b480      	push	{r7}
 80020a0:	b085      	sub	sp, #20
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	601a      	str	r2, [r3, #0]
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d103      	bne.n	8002106 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	e00c      	b.n	8002120 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3308      	adds	r3, #8
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e002      	b.n	8002114 <vListInsert+0x2e>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	429a      	cmp	r2, r3
 800211e:	d2f6      	bcs.n	800210e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	601a      	str	r2, [r3, #0]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6892      	ldr	r2, [r2, #8]
 800216e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6852      	ldr	r2, [r2, #4]
 8002178:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	d103      	bne.n	800218c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	1e5a      	subs	r2, r3, #1
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c4:	f383 8811 	msr	BASEPRI, r3
 80021c8:	f3bf 8f6f 	isb	sy
 80021cc:	f3bf 8f4f 	dsb	sy
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	e7fe      	b.n	80021d2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80021d4:	f002 f862 	bl	800429c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e0:	68f9      	ldr	r1, [r7, #12]
 80021e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	441a      	add	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	3b01      	subs	r3, #1
 8002206:	68f9      	ldr	r1, [r7, #12]
 8002208:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	441a      	add	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	22ff      	movs	r2, #255	; 0xff
 8002218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	22ff      	movs	r2, #255	; 0xff
 8002220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d114      	bne.n	8002254 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d01a      	beq.n	8002268 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3310      	adds	r3, #16
 8002236:	4618      	mov	r0, r3
 8002238:	f001 f8c4 	bl	80033c4 <xTaskRemoveFromEventList>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d012      	beq.n	8002268 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <xQueueGenericReset+0xcc>)
 8002244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	f3bf 8f6f 	isb	sy
 8002252:	e009      	b.n	8002268 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3310      	adds	r3, #16
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fef3 	bl	8002044 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3324      	adds	r3, #36	; 0x24
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff feee 	bl	8002044 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002268:	f002 f846 	bl	80042f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800226c:	2301      	movs	r3, #1
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	e000ed04 	.word	0xe000ed04

0800227c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08e      	sub	sp, #56	; 0x38
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d109      	bne.n	80022a4 <xQueueGenericCreateStatic+0x28>
 8002290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002294:	f383 8811 	msr	BASEPRI, r3
 8002298:	f3bf 8f6f 	isb	sy
 800229c:	f3bf 8f4f 	dsb	sy
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022a2:	e7fe      	b.n	80022a2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <xQueueGenericCreateStatic+0x42>
 80022aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ae:	f383 8811 	msr	BASEPRI, r3
 80022b2:	f3bf 8f6f 	isb	sy
 80022b6:	f3bf 8f4f 	dsb	sy
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
 80022bc:	e7fe      	b.n	80022bc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <xQueueGenericCreateStatic+0x4e>
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <xQueueGenericCreateStatic+0x52>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <xQueueGenericCreateStatic+0x54>
 80022ce:	2300      	movs	r3, #0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d109      	bne.n	80022e8 <xQueueGenericCreateStatic+0x6c>
 80022d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	623b      	str	r3, [r7, #32]
 80022e6:	e7fe      	b.n	80022e6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <xQueueGenericCreateStatic+0x78>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <xQueueGenericCreateStatic+0x7c>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <xQueueGenericCreateStatic+0x7e>
 80022f8:	2300      	movs	r3, #0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <xQueueGenericCreateStatic+0x96>
 80022fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002302:	f383 8811 	msr	BASEPRI, r3
 8002306:	f3bf 8f6f 	isb	sy
 800230a:	f3bf 8f4f 	dsb	sy
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	e7fe      	b.n	8002310 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002312:	2348      	movs	r3, #72	; 0x48
 8002314:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b48      	cmp	r3, #72	; 0x48
 800231a:	d009      	beq.n	8002330 <xQueueGenericCreateStatic+0xb4>
 800231c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002320:	f383 8811 	msr	BASEPRI, r3
 8002324:	f3bf 8f6f 	isb	sy
 8002328:	f3bf 8f4f 	dsb	sy
 800232c:	61bb      	str	r3, [r7, #24]
 800232e:	e7fe      	b.n	800232e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00d      	beq.n	8002356 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800233a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002342:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f805 	bl	8002360 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002358:	4618      	mov	r0, r3
 800235a:	3730      	adds	r7, #48	; 0x30
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d103      	bne.n	800237c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e002      	b.n	8002382 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800238e:	2101      	movs	r1, #1
 8002390:	69b8      	ldr	r0, [r7, #24]
 8002392:	f7ff ff0b 	bl	80021ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08e      	sub	sp, #56	; 0x38
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023ae:	2300      	movs	r3, #0
 80023b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d109      	bne.n	80023d0 <xQueueGenericSend+0x30>
 80023bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ce:	e7fe      	b.n	80023ce <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d103      	bne.n	80023de <xQueueGenericSend+0x3e>
 80023d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <xQueueGenericSend+0x42>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <xQueueGenericSend+0x44>
 80023e2:	2300      	movs	r3, #0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d109      	bne.n	80023fc <xQueueGenericSend+0x5c>
 80023e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
 80023fa:	e7fe      	b.n	80023fa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d103      	bne.n	800240a <xQueueGenericSend+0x6a>
 8002402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <xQueueGenericSend+0x6e>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <xQueueGenericSend+0x70>
 800240e:	2300      	movs	r3, #0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d109      	bne.n	8002428 <xQueueGenericSend+0x88>
 8002414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	623b      	str	r3, [r7, #32]
 8002426:	e7fe      	b.n	8002426 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002428:	f001 f988 	bl	800373c <xTaskGetSchedulerState>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d102      	bne.n	8002438 <xQueueGenericSend+0x98>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <xQueueGenericSend+0x9c>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <xQueueGenericSend+0x9e>
 800243c:	2300      	movs	r3, #0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <xQueueGenericSend+0xb6>
 8002442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002446:	f383 8811 	msr	BASEPRI, r3
 800244a:	f3bf 8f6f 	isb	sy
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	e7fe      	b.n	8002454 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002456:	f001 ff21 	bl	800429c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800245a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002462:	429a      	cmp	r2, r3
 8002464:	d302      	bcc.n	800246c <xQueueGenericSend+0xcc>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d129      	bne.n	80024c0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002472:	f000 f9ff 	bl	8002874 <prvCopyDataToQueue>
 8002476:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	2b00      	cmp	r3, #0
 800247e:	d010      	beq.n	80024a2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	3324      	adds	r3, #36	; 0x24
 8002484:	4618      	mov	r0, r3
 8002486:	f000 ff9d 	bl	80033c4 <xTaskRemoveFromEventList>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002490:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <xQueueGenericSend+0x1f0>)
 8002492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	e00a      	b.n	80024b8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024a8:	4b39      	ldr	r3, [pc, #228]	; (8002590 <xQueueGenericSend+0x1f0>)
 80024aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024b8:	f001 ff1e 	bl	80042f8 <vPortExitCritical>
				return pdPASS;
 80024bc:	2301      	movs	r3, #1
 80024be:	e063      	b.n	8002588 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d103      	bne.n	80024ce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024c6:	f001 ff17 	bl	80042f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e05c      	b.n	8002588 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d106      	bne.n	80024e2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 ffd5 	bl	8003488 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024de:	2301      	movs	r3, #1
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024e2:	f001 ff09 	bl	80042f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024e6:	f000 fd4f 	bl	8002f88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024ea:	f001 fed7 	bl	800429c <vPortEnterCritical>
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024f4:	b25b      	sxtb	r3, r3
 80024f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fa:	d103      	bne.n	8002504 <xQueueGenericSend+0x164>
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800250a:	b25b      	sxtb	r3, r3
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d103      	bne.n	800251a <xQueueGenericSend+0x17a>
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800251a:	f001 feed 	bl	80042f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800251e:	1d3a      	adds	r2, r7, #4
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f000 ffc4 	bl	80034b4 <xTaskCheckForTimeOut>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d124      	bne.n	800257c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002534:	f000 fa96 	bl	8002a64 <prvIsQueueFull>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d018      	beq.n	8002570 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	3310      	adds	r3, #16
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f000 feee 	bl	8003328 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800254c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800254e:	f000 fa21 	bl	8002994 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002552:	f000 fd27 	bl	8002fa4 <xTaskResumeAll>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	f47f af7c 	bne.w	8002456 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <xQueueGenericSend+0x1f0>)
 8002560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	f3bf 8f4f 	dsb	sy
 800256a:	f3bf 8f6f 	isb	sy
 800256e:	e772      	b.n	8002456 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002572:	f000 fa0f 	bl	8002994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002576:	f000 fd15 	bl	8002fa4 <xTaskResumeAll>
 800257a:	e76c      	b.n	8002456 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800257c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800257e:	f000 fa09 	bl	8002994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002582:	f000 fd0f 	bl	8002fa4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002586:	2300      	movs	r3, #0
		}
	}
}
 8002588:	4618      	mov	r0, r3
 800258a:	3738      	adds	r7, #56	; 0x38
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	e000ed04 	.word	0xe000ed04

08002594 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08e      	sub	sp, #56	; 0x38
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d109      	bne.n	80025c0 <xQueueGenericSendFromISR+0x2c>
 80025ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
 80025be:	e7fe      	b.n	80025be <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <xQueueGenericSendFromISR+0x3a>
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <xQueueGenericSendFromISR+0x3e>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <xQueueGenericSendFromISR+0x40>
 80025d2:	2300      	movs	r3, #0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <xQueueGenericSendFromISR+0x58>
 80025d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	e7fe      	b.n	80025ea <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d103      	bne.n	80025fa <xQueueGenericSendFromISR+0x66>
 80025f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <xQueueGenericSendFromISR+0x6a>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <xQueueGenericSendFromISR+0x6c>
 80025fe:	2300      	movs	r3, #0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d109      	bne.n	8002618 <xQueueGenericSendFromISR+0x84>
 8002604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	e7fe      	b.n	8002616 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002618:	f001 ff1c 	bl	8004454 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800261c:	f3ef 8211 	mrs	r2, BASEPRI
 8002620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002624:	f383 8811 	msr	BASEPRI, r3
 8002628:	f3bf 8f6f 	isb	sy
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	61ba      	str	r2, [r7, #24]
 8002632:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002634:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002640:	429a      	cmp	r2, r3
 8002642:	d302      	bcc.n	800264a <xQueueGenericSendFromISR+0xb6>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d12c      	bne.n	80026a4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	68b9      	ldr	r1, [r7, #8]
 8002658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800265a:	f000 f90b 	bl	8002874 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800265e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002666:	d112      	bne.n	800268e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	2b00      	cmp	r3, #0
 800266e:	d016      	beq.n	800269e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	3324      	adds	r3, #36	; 0x24
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fea5 	bl	80033c4 <xTaskRemoveFromEventList>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00e      	beq.n	800269e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e007      	b.n	800269e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800268e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002692:	3301      	adds	r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	b25a      	sxtb	r2, r3
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800269e:	2301      	movs	r3, #1
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80026a2:	e001      	b.n	80026a8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
 80026a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026aa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3738      	adds	r7, #56	; 0x38
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08c      	sub	sp, #48	; 0x30
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <xQueueReceive+0x2e>
	__asm volatile
 80026d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026da:	f383 8811 	msr	BASEPRI, r3
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	623b      	str	r3, [r7, #32]
 80026e8:	e7fe      	b.n	80026e8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d103      	bne.n	80026f8 <xQueueReceive+0x3c>
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <xQueueReceive+0x40>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <xQueueReceive+0x42>
 80026fc:	2300      	movs	r3, #0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <xQueueReceive+0x5a>
 8002702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002706:	f383 8811 	msr	BASEPRI, r3
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	e7fe      	b.n	8002714 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002716:	f001 f811 	bl	800373c <xTaskGetSchedulerState>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <xQueueReceive+0x6a>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <xQueueReceive+0x6e>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <xQueueReceive+0x70>
 800272a:	2300      	movs	r3, #0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <xQueueReceive+0x88>
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	e7fe      	b.n	8002742 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002744:	f001 fdaa 	bl	800429c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01f      	beq.n	8002794 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002758:	f000 f8f6 	bl	8002948 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	1e5a      	subs	r2, r3, #1
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00f      	beq.n	800278c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	3310      	adds	r3, #16
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fe27 	bl	80033c4 <xTaskRemoveFromEventList>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d007      	beq.n	800278c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800277c:	4b3c      	ldr	r3, [pc, #240]	; (8002870 <xQueueReceive+0x1b4>)
 800277e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800278c:	f001 fdb4 	bl	80042f8 <vPortExitCritical>
				return pdPASS;
 8002790:	2301      	movs	r3, #1
 8002792:	e069      	b.n	8002868 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d103      	bne.n	80027a2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800279a:	f001 fdad 	bl	80042f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800279e:	2300      	movs	r3, #0
 80027a0:	e062      	b.n	8002868 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d106      	bne.n	80027b6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fe6b 	bl	8003488 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027b2:	2301      	movs	r3, #1
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027b6:	f001 fd9f 	bl	80042f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027ba:	f000 fbe5 	bl	8002f88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027be:	f001 fd6d 	bl	800429c <vPortEnterCritical>
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027c8:	b25b      	sxtb	r3, r3
 80027ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ce:	d103      	bne.n	80027d8 <xQueueReceive+0x11c>
 80027d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d103      	bne.n	80027ee <xQueueReceive+0x132>
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027ee:	f001 fd83 	bl	80042f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027f2:	1d3a      	adds	r2, r7, #4
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fe5a 	bl	80034b4 <xTaskCheckForTimeOut>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d123      	bne.n	800284e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002808:	f000 f916 	bl	8002a38 <prvIsQueueEmpty>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d017      	beq.n	8002842 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	3324      	adds	r3, #36	; 0x24
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fd84 	bl	8003328 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002822:	f000 f8b7 	bl	8002994 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002826:	f000 fbbd 	bl	8002fa4 <xTaskResumeAll>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d189      	bne.n	8002744 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002830:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <xQueueReceive+0x1b4>)
 8002832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	e780      	b.n	8002744 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002844:	f000 f8a6 	bl	8002994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002848:	f000 fbac 	bl	8002fa4 <xTaskResumeAll>
 800284c:	e77a      	b.n	8002744 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800284e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002850:	f000 f8a0 	bl	8002994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002854:	f000 fba6 	bl	8002fa4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800285a:	f000 f8ed 	bl	8002a38 <prvIsQueueEmpty>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	f43f af6f 	beq.w	8002744 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002866:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002868:	4618      	mov	r0, r3
 800286a:	3730      	adds	r7, #48	; 0x30
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	e000ed04 	.word	0xe000ed04

08002874 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10d      	bne.n	80028ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d14d      	bne.n	8002936 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 ff6a 	bl	8003778 <xTaskPriorityDisinherit>
 80028a4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	e043      	b.n	8002936 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d119      	bne.n	80028e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6898      	ldr	r0, [r3, #8]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	461a      	mov	r2, r3
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	f002 fbb8 	bl	8005034 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	441a      	add	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d32b      	bcc.n	8002936 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	e026      	b.n	8002936 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68d8      	ldr	r0, [r3, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	461a      	mov	r2, r3
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	f002 fb9e 	bl	8005034 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	425b      	negs	r3, r3
 8002902:	441a      	add	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d207      	bcs.n	8002924 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	425b      	negs	r3, r3
 800291e:	441a      	add	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d105      	bne.n	8002936 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	3b01      	subs	r3, #1
 8002934:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800293e:	697b      	ldr	r3, [r7, #20]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d018      	beq.n	800298c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	441a      	add	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	d303      	bcc.n	800297c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68d9      	ldr	r1, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	461a      	mov	r2, r3
 8002986:	6838      	ldr	r0, [r7, #0]
 8002988:	f002 fb54 	bl	8005034 <memcpy>
	}
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800299c:	f001 fc7e 	bl	800429c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029a8:	e011      	b.n	80029ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d012      	beq.n	80029d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3324      	adds	r3, #36	; 0x24
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fd04 	bl	80033c4 <xTaskRemoveFromEventList>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80029c2:	f000 fdd7 	bl	8003574 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	dce9      	bgt.n	80029aa <prvUnlockQueue+0x16>
 80029d6:	e000      	b.n	80029da <prvUnlockQueue+0x46>
					break;
 80029d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	22ff      	movs	r2, #255	; 0xff
 80029de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80029e2:	f001 fc89 	bl	80042f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80029e6:	f001 fc59 	bl	800429c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029f2:	e011      	b.n	8002a18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d012      	beq.n	8002a22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3310      	adds	r3, #16
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fcdf 	bl	80033c4 <xTaskRemoveFromEventList>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a0c:	f000 fdb2 	bl	8003574 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a10:	7bbb      	ldrb	r3, [r7, #14]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	dce9      	bgt.n	80029f4 <prvUnlockQueue+0x60>
 8002a20:	e000      	b.n	8002a24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	22ff      	movs	r2, #255	; 0xff
 8002a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a2c:	f001 fc64 	bl	80042f8 <vPortExitCritical>
}
 8002a30:	bf00      	nop
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a40:	f001 fc2c 	bl	800429c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d102      	bne.n	8002a52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e001      	b.n	8002a56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a56:	f001 fc4f 	bl	80042f8 <vPortExitCritical>

	return xReturn;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a6c:	f001 fc16 	bl	800429c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d102      	bne.n	8002a82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e001      	b.n	8002a86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a86:	f001 fc37 	bl	80042f8 <vPortExitCritical>

	return xReturn;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e014      	b.n	8002ace <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002aa4:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <vQueueAddToRegistry+0x4c>)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10b      	bne.n	8002ac8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ab0:	490b      	ldr	r1, [pc, #44]	; (8002ae0 <vQueueAddToRegistry+0x4c>)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002aba:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <vQueueAddToRegistry+0x4c>)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ac6:	e005      	b.n	8002ad4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3301      	adds	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b07      	cmp	r3, #7
 8002ad2:	d9e7      	bls.n	8002aa4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	200045f8 	.word	0x200045f8

08002ae4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002af4:	f001 fbd2 	bl	800429c <vPortEnterCritical>
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002afe:	b25b      	sxtb	r3, r3
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d103      	bne.n	8002b0e <vQueueWaitForMessageRestricted+0x2a>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b14:	b25b      	sxtb	r3, r3
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1a:	d103      	bne.n	8002b24 <vQueueWaitForMessageRestricted+0x40>
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b24:	f001 fbe8 	bl	80042f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d106      	bne.n	8002b3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	3324      	adds	r3, #36	; 0x24
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fc19 	bl	8003370 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b3e:	6978      	ldr	r0, [r7, #20]
 8002b40:	f7ff ff28 	bl	8002994 <prvUnlockQueue>
	}
 8002b44:	bf00      	nop
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08e      	sub	sp, #56	; 0x38
 8002b50:	af04      	add	r7, sp, #16
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <xTaskCreateStatic+0x28>
 8002b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	623b      	str	r3, [r7, #32]
 8002b72:	e7fe      	b.n	8002b72 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <xTaskCreateStatic+0x42>
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	e7fe      	b.n	8002b8c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b8e:	2354      	movs	r3, #84	; 0x54
 8002b90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b54      	cmp	r3, #84	; 0x54
 8002b96:	d009      	beq.n	8002bac <xTaskCreateStatic+0x60>
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	e7fe      	b.n	8002baa <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d01e      	beq.n	8002bf0 <xTaskCreateStatic+0xa4>
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01b      	beq.n	8002bf0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002bca:	2300      	movs	r3, #0
 8002bcc:	9303      	str	r3, [sp, #12]
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	9302      	str	r3, [sp, #8]
 8002bd2:	f107 0314 	add.w	r3, r7, #20
 8002bd6:	9301      	str	r3, [sp, #4]
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f850 	bl	8002c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bea:	f000 f8cb 	bl	8002d84 <prvAddNewTaskToReadyList>
 8002bee:	e001      	b.n	8002bf4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002bf4:	697b      	ldr	r3, [r7, #20]
	}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3728      	adds	r7, #40	; 0x28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b08c      	sub	sp, #48	; 0x30
 8002c02:	af04      	add	r7, sp, #16
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f001 fc5c 	bl	80044d0 <pvPortMalloc>
 8002c18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00e      	beq.n	8002c3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002c20:	2054      	movs	r0, #84	; 0x54
 8002c22:	f001 fc55 	bl	80044d0 <pvPortMalloc>
 8002c26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
 8002c34:	e005      	b.n	8002c42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c36:	6978      	ldr	r0, [r7, #20]
 8002c38:	f001 fd0c 	bl	8004654 <vPortFree>
 8002c3c:	e001      	b.n	8002c42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d017      	beq.n	8002c78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c50:	88fa      	ldrh	r2, [r7, #6]
 8002c52:	2300      	movs	r3, #0
 8002c54:	9303      	str	r3, [sp, #12]
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	9302      	str	r3, [sp, #8]
 8002c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f80e 	bl	8002c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c6c:	69f8      	ldr	r0, [r7, #28]
 8002c6e:	f000 f889 	bl	8002d84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c72:	2301      	movs	r3, #1
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	e002      	b.n	8002c7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c78:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
	}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	f023 0307 	bic.w	r3, r3, #7
 8002cae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <prvInitialiseNewTask+0x46>
 8002cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	e7fe      	b.n	8002ccc <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	e012      	b.n	8002cfa <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	4413      	add	r3, r2
 8002cda:	7819      	ldrb	r1, [r3, #0]
 8002cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3334      	adds	r3, #52	; 0x34
 8002ce4:	460a      	mov	r2, r1
 8002ce6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	4413      	add	r3, r2
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d006      	beq.n	8002d02 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	2b0f      	cmp	r3, #15
 8002cfe:	d9e9      	bls.n	8002cd4 <prvInitialiseNewTask+0x4c>
 8002d00:	e000      	b.n	8002d04 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002d02:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	d901      	bls.n	8002d16 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d12:	2306      	movs	r3, #6
 8002d14:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d1a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	2200      	movs	r2, #0
 8002d26:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff f9a9 	bl	8002084 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	3318      	adds	r3, #24
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff f9a4 	bl	8002084 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	f1c3 0207 	rsb	r2, r3, #7
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	2200      	movs	r2, #0
 8002d56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	68f9      	ldr	r1, [r7, #12]
 8002d64:	69b8      	ldr	r0, [r7, #24]
 8002d66:	f001 f96f 	bl	8004048 <pxPortInitialiseStack>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d7c:	bf00      	nop
 8002d7e:	3720      	adds	r7, #32
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d8c:	f001 fa86 	bl	800429c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d90:	4b2a      	ldr	r3, [pc, #168]	; (8002e3c <prvAddNewTaskToReadyList+0xb8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <prvAddNewTaskToReadyList+0xb8>)
 8002d98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d9a:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <prvAddNewTaskToReadyList+0xbc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002da2:	4a27      	ldr	r2, [pc, #156]	; (8002e40 <prvAddNewTaskToReadyList+0xbc>)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002da8:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <prvAddNewTaskToReadyList+0xb8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d110      	bne.n	8002dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002db0:	f000 fc04 	bl	80035bc <prvInitialiseTaskLists>
 8002db4:	e00d      	b.n	8002dd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002db6:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <prvAddNewTaskToReadyList+0xc0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dbe:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <prvAddNewTaskToReadyList+0xbc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d802      	bhi.n	8002dd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002dcc:	4a1c      	ldr	r2, [pc, #112]	; (8002e40 <prvAddNewTaskToReadyList+0xbc>)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <prvAddNewTaskToReadyList+0xc4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <prvAddNewTaskToReadyList+0xc4>)
 8002dda:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	2201      	movs	r2, #1
 8002de2:	409a      	lsls	r2, r3
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <prvAddNewTaskToReadyList+0xc8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <prvAddNewTaskToReadyList+0xc8>)
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <prvAddNewTaskToReadyList+0xcc>)
 8002dfc:	441a      	add	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3304      	adds	r3, #4
 8002e02:	4619      	mov	r1, r3
 8002e04:	4610      	mov	r0, r2
 8002e06:	f7ff f94a 	bl	800209e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e0a:	f001 fa75 	bl	80042f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e0e:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <prvAddNewTaskToReadyList+0xc0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00e      	beq.n	8002e34 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e16:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <prvAddNewTaskToReadyList+0xbc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d207      	bcs.n	8002e34 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <prvAddNewTaskToReadyList+0xd0>)
 8002e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	200001f4 	.word	0x200001f4
 8002e40:	200000f4 	.word	0x200000f4
 8002e44:	20000200 	.word	0x20000200
 8002e48:	20000210 	.word	0x20000210
 8002e4c:	200001fc 	.word	0x200001fc
 8002e50:	200000f8 	.word	0x200000f8
 8002e54:	e000ed04 	.word	0xe000ed04

08002e58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d016      	beq.n	8002e98 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <vTaskDelay+0x60>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d009      	beq.n	8002e86 <vTaskDelay+0x2e>
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	e7fe      	b.n	8002e84 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002e86:	f000 f87f 	bl	8002f88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fcf7 	bl	8003880 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e92:	f000 f887 	bl	8002fa4 <xTaskResumeAll>
 8002e96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d107      	bne.n	8002eae <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <vTaskDelay+0x64>)
 8002ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	2000021c 	.word	0x2000021c
 8002ebc:	e000ed04 	.word	0xe000ed04

08002ec0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ece:	463a      	mov	r2, r7
 8002ed0:	1d39      	adds	r1, r7, #4
 8002ed2:	f107 0308 	add.w	r3, r7, #8
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f001 fcd0 	bl	800487c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002edc:	6839      	ldr	r1, [r7, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	9202      	str	r2, [sp, #8]
 8002ee4:	9301      	str	r3, [sp, #4]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	2300      	movs	r3, #0
 8002eec:	460a      	mov	r2, r1
 8002eee:	4920      	ldr	r1, [pc, #128]	; (8002f70 <vTaskStartScheduler+0xb0>)
 8002ef0:	4820      	ldr	r0, [pc, #128]	; (8002f74 <vTaskStartScheduler+0xb4>)
 8002ef2:	f7ff fe2b 	bl	8002b4c <xTaskCreateStatic>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	4b1f      	ldr	r3, [pc, #124]	; (8002f78 <vTaskStartScheduler+0xb8>)
 8002efa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002efc:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <vTaskStartScheduler+0xb8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f04:	2301      	movs	r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e001      	b.n	8002f0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d102      	bne.n	8002f1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002f14:	f000 fd1a 	bl	800394c <xTimerCreateTimerTask>
 8002f18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d115      	bne.n	8002f4c <vTaskStartScheduler+0x8c>
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <vTaskStartScheduler+0xbc>)
 8002f34:	f04f 32ff 	mov.w	r2, #4294967295
 8002f38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <vTaskStartScheduler+0xc0>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002f40:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <vTaskStartScheduler+0xc4>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f46:	f001 f90b 	bl	8004160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f4a:	e00d      	b.n	8002f68 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f52:	d109      	bne.n	8002f68 <vTaskStartScheduler+0xa8>
 8002f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	e7fe      	b.n	8002f66 <vTaskStartScheduler+0xa6>
}
 8002f68:	bf00      	nop
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	08005870 	.word	0x08005870
 8002f74:	0800358d 	.word	0x0800358d
 8002f78:	20000218 	.word	0x20000218
 8002f7c:	20000214 	.word	0x20000214
 8002f80:	20000200 	.word	0x20000200
 8002f84:	200001f8 	.word	0x200001f8

08002f88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <vTaskSuspendAll+0x18>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3301      	adds	r3, #1
 8002f92:	4a03      	ldr	r2, [pc, #12]	; (8002fa0 <vTaskSuspendAll+0x18>)
 8002f94:	6013      	str	r3, [r2, #0]
}
 8002f96:	bf00      	nop
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	2000021c 	.word	0x2000021c

08002fa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002fb2:	4b41      	ldr	r3, [pc, #260]	; (80030b8 <xTaskResumeAll+0x114>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <xTaskResumeAll+0x2a>
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	e7fe      	b.n	8002fcc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002fce:	f001 f965 	bl	800429c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002fd2:	4b39      	ldr	r3, [pc, #228]	; (80030b8 <xTaskResumeAll+0x114>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	4a37      	ldr	r2, [pc, #220]	; (80030b8 <xTaskResumeAll+0x114>)
 8002fda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fdc:	4b36      	ldr	r3, [pc, #216]	; (80030b8 <xTaskResumeAll+0x114>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d161      	bne.n	80030a8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fe4:	4b35      	ldr	r3, [pc, #212]	; (80030bc <xTaskResumeAll+0x118>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d05d      	beq.n	80030a8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fec:	e02e      	b.n	800304c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002fee:	4b34      	ldr	r3, [pc, #208]	; (80030c0 <xTaskResumeAll+0x11c>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3318      	adds	r3, #24
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff f8ac 	bl	8002158 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3304      	adds	r3, #4
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff f8a7 	bl	8002158 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	2201      	movs	r2, #1
 8003010:	409a      	lsls	r2, r3
 8003012:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <xTaskResumeAll+0x120>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4313      	orrs	r3, r2
 8003018:	4a2a      	ldr	r2, [pc, #168]	; (80030c4 <xTaskResumeAll+0x120>)
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4a27      	ldr	r2, [pc, #156]	; (80030c8 <xTaskResumeAll+0x124>)
 800302a:	441a      	add	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3304      	adds	r3, #4
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f7ff f833 	bl	800209e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	4b23      	ldr	r3, [pc, #140]	; (80030cc <xTaskResumeAll+0x128>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003046:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <xTaskResumeAll+0x12c>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800304c:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <xTaskResumeAll+0x11c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1cc      	bne.n	8002fee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800305a:	f000 fb49 	bl	80036f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800305e:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <xTaskResumeAll+0x130>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d010      	beq.n	800308c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800306a:	f000 f847 	bl	80030fc <xTaskIncrementTick>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003074:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <xTaskResumeAll+0x12c>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3b01      	subs	r3, #1
 800307e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f1      	bne.n	800306a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003086:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <xTaskResumeAll+0x130>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800308c:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <xTaskResumeAll+0x12c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d009      	beq.n	80030a8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003094:	2301      	movs	r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003098:	4b0f      	ldr	r3, [pc, #60]	; (80030d8 <xTaskResumeAll+0x134>)
 800309a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80030a8:	f001 f926 	bl	80042f8 <vPortExitCritical>

	return xAlreadyYielded;
 80030ac:	68bb      	ldr	r3, [r7, #8]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	2000021c 	.word	0x2000021c
 80030bc:	200001f4 	.word	0x200001f4
 80030c0:	200001b4 	.word	0x200001b4
 80030c4:	200001fc 	.word	0x200001fc
 80030c8:	200000f8 	.word	0x200000f8
 80030cc:	200000f4 	.word	0x200000f4
 80030d0:	20000208 	.word	0x20000208
 80030d4:	20000204 	.word	0x20000204
 80030d8:	e000ed04 	.word	0xe000ed04

080030dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <xTaskGetTickCount+0x1c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80030e8:	687b      	ldr	r3, [r7, #4]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	200001f8 	.word	0x200001f8

080030fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003106:	4b50      	ldr	r3, [pc, #320]	; (8003248 <xTaskIncrementTick+0x14c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f040 808c 	bne.w	8003228 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003110:	4b4e      	ldr	r3, [pc, #312]	; (800324c <xTaskIncrementTick+0x150>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3301      	adds	r3, #1
 8003116:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003118:	4a4c      	ldr	r2, [pc, #304]	; (800324c <xTaskIncrementTick+0x150>)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d11f      	bne.n	8003164 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003124:	4b4a      	ldr	r3, [pc, #296]	; (8003250 <xTaskIncrementTick+0x154>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <xTaskIncrementTick+0x46>
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	e7fe      	b.n	8003140 <xTaskIncrementTick+0x44>
 8003142:	4b43      	ldr	r3, [pc, #268]	; (8003250 <xTaskIncrementTick+0x154>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	4b42      	ldr	r3, [pc, #264]	; (8003254 <xTaskIncrementTick+0x158>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a40      	ldr	r2, [pc, #256]	; (8003250 <xTaskIncrementTick+0x154>)
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4a40      	ldr	r2, [pc, #256]	; (8003254 <xTaskIncrementTick+0x158>)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b40      	ldr	r3, [pc, #256]	; (8003258 <xTaskIncrementTick+0x15c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3301      	adds	r3, #1
 800315c:	4a3e      	ldr	r2, [pc, #248]	; (8003258 <xTaskIncrementTick+0x15c>)
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	f000 fac6 	bl	80036f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003164:	4b3d      	ldr	r3, [pc, #244]	; (800325c <xTaskIncrementTick+0x160>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	429a      	cmp	r2, r3
 800316c:	d34d      	bcc.n	800320a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800316e:	4b38      	ldr	r3, [pc, #224]	; (8003250 <xTaskIncrementTick+0x154>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <xTaskIncrementTick+0x80>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <xTaskIncrementTick+0x82>
 800317c:	2300      	movs	r3, #0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003182:	4b36      	ldr	r3, [pc, #216]	; (800325c <xTaskIncrementTick+0x160>)
 8003184:	f04f 32ff 	mov.w	r2, #4294967295
 8003188:	601a      	str	r2, [r3, #0]
					break;
 800318a:	e03e      	b.n	800320a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800318c:	4b30      	ldr	r3, [pc, #192]	; (8003250 <xTaskIncrementTick+0x154>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d203      	bcs.n	80031ac <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031a4:	4a2d      	ldr	r2, [pc, #180]	; (800325c <xTaskIncrementTick+0x160>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6013      	str	r3, [r2, #0]
						break;
 80031aa:	e02e      	b.n	800320a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	3304      	adds	r3, #4
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe ffd1 	bl	8002158 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d004      	beq.n	80031c8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	3318      	adds	r3, #24
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe ffc8 	bl	8002158 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	2201      	movs	r2, #1
 80031ce:	409a      	lsls	r2, r3
 80031d0:	4b23      	ldr	r3, [pc, #140]	; (8003260 <xTaskIncrementTick+0x164>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	4a22      	ldr	r2, [pc, #136]	; (8003260 <xTaskIncrementTick+0x164>)
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <xTaskIncrementTick+0x168>)
 80031e8:	441a      	add	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	3304      	adds	r3, #4
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f7fe ff54 	bl	800209e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fa:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <xTaskIncrementTick+0x16c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	429a      	cmp	r2, r3
 8003202:	d3b4      	bcc.n	800316e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003204:	2301      	movs	r3, #1
 8003206:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003208:	e7b1      	b.n	800316e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800320a:	4b17      	ldr	r3, [pc, #92]	; (8003268 <xTaskIncrementTick+0x16c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003210:	4914      	ldr	r1, [pc, #80]	; (8003264 <xTaskIncrementTick+0x168>)
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d907      	bls.n	8003232 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003222:	2301      	movs	r3, #1
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	e004      	b.n	8003232 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003228:	4b10      	ldr	r3, [pc, #64]	; (800326c <xTaskIncrementTick+0x170>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3301      	adds	r3, #1
 800322e:	4a0f      	ldr	r2, [pc, #60]	; (800326c <xTaskIncrementTick+0x170>)
 8003230:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003232:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <xTaskIncrementTick+0x174>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800323a:	2301      	movs	r3, #1
 800323c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800323e:	697b      	ldr	r3, [r7, #20]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	2000021c 	.word	0x2000021c
 800324c:	200001f8 	.word	0x200001f8
 8003250:	200001ac 	.word	0x200001ac
 8003254:	200001b0 	.word	0x200001b0
 8003258:	2000020c 	.word	0x2000020c
 800325c:	20000214 	.word	0x20000214
 8003260:	200001fc 	.word	0x200001fc
 8003264:	200000f8 	.word	0x200000f8
 8003268:	200000f4 	.word	0x200000f4
 800326c:	20000204 	.word	0x20000204
 8003270:	20000208 	.word	0x20000208

08003274 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800327a:	4b26      	ldr	r3, [pc, #152]	; (8003314 <vTaskSwitchContext+0xa0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003282:	4b25      	ldr	r3, [pc, #148]	; (8003318 <vTaskSwitchContext+0xa4>)
 8003284:	2201      	movs	r2, #1
 8003286:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003288:	e03e      	b.n	8003308 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800328a:	4b23      	ldr	r3, [pc, #140]	; (8003318 <vTaskSwitchContext+0xa4>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003290:	4b22      	ldr	r3, [pc, #136]	; (800331c <vTaskSwitchContext+0xa8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	fab3 f383 	clz	r3, r3
 800329c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800329e:	7afb      	ldrb	r3, [r7, #11]
 80032a0:	f1c3 031f 	rsb	r3, r3, #31
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	491e      	ldr	r1, [pc, #120]	; (8003320 <vTaskSwitchContext+0xac>)
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <vTaskSwitchContext+0x5a>
	__asm volatile
 80032ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	e7fe      	b.n	80032cc <vTaskSwitchContext+0x58>
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4a11      	ldr	r2, [pc, #68]	; (8003320 <vTaskSwitchContext+0xac>)
 80032da:	4413      	add	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	3308      	adds	r3, #8
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d104      	bne.n	80032fe <vTaskSwitchContext+0x8a>
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4a07      	ldr	r2, [pc, #28]	; (8003324 <vTaskSwitchContext+0xb0>)
 8003306:	6013      	str	r3, [r2, #0]
}
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	2000021c 	.word	0x2000021c
 8003318:	20000208 	.word	0x20000208
 800331c:	200001fc 	.word	0x200001fc
 8003320:	200000f8 	.word	0x200000f8
 8003324:	200000f4 	.word	0x200000f4

08003328 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d109      	bne.n	800334c <vTaskPlaceOnEventList+0x24>
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	e7fe      	b.n	800334a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800334c:	4b07      	ldr	r3, [pc, #28]	; (800336c <vTaskPlaceOnEventList+0x44>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3318      	adds	r3, #24
 8003352:	4619      	mov	r1, r3
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7fe fec6 	bl	80020e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800335a:	2101      	movs	r1, #1
 800335c:	6838      	ldr	r0, [r7, #0]
 800335e:	f000 fa8f 	bl	8003880 <prvAddCurrentTaskToDelayedList>
}
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	200000f4 	.word	0x200000f4

08003370 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <vTaskPlaceOnEventListRestricted+0x26>
 8003382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	e7fe      	b.n	8003394 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <vTaskPlaceOnEventListRestricted+0x50>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3318      	adds	r3, #24
 800339c:	4619      	mov	r1, r3
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7fe fe7d 	bl	800209e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80033aa:	f04f 33ff 	mov.w	r3, #4294967295
 80033ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	68b8      	ldr	r0, [r7, #8]
 80033b4:	f000 fa64 	bl	8003880 <prvAddCurrentTaskToDelayedList>
	}
 80033b8:	bf00      	nop
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	200000f4 	.word	0x200000f4

080033c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <xTaskRemoveFromEventList+0x2a>
 80033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e7fe      	b.n	80033ec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	3318      	adds	r3, #24
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe feb0 	bl	8002158 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <xTaskRemoveFromEventList+0xac>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d11c      	bne.n	800343a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	3304      	adds	r3, #4
 8003404:	4618      	mov	r0, r3
 8003406:	f7fe fea7 	bl	8002158 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	2201      	movs	r2, #1
 8003410:	409a      	lsls	r2, r3
 8003412:	4b18      	ldr	r3, [pc, #96]	; (8003474 <xTaskRemoveFromEventList+0xb0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4313      	orrs	r3, r2
 8003418:	4a16      	ldr	r2, [pc, #88]	; (8003474 <xTaskRemoveFromEventList+0xb0>)
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4a13      	ldr	r2, [pc, #76]	; (8003478 <xTaskRemoveFromEventList+0xb4>)
 800342a:	441a      	add	r2, r3
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	3304      	adds	r3, #4
 8003430:	4619      	mov	r1, r3
 8003432:	4610      	mov	r0, r2
 8003434:	f7fe fe33 	bl	800209e <vListInsertEnd>
 8003438:	e005      	b.n	8003446 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	3318      	adds	r3, #24
 800343e:	4619      	mov	r1, r3
 8003440:	480e      	ldr	r0, [pc, #56]	; (800347c <xTaskRemoveFromEventList+0xb8>)
 8003442:	f7fe fe2c 	bl	800209e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344a:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <xTaskRemoveFromEventList+0xbc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	429a      	cmp	r2, r3
 8003452:	d905      	bls.n	8003460 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003454:	2301      	movs	r3, #1
 8003456:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <xTaskRemoveFromEventList+0xc0>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	e001      	b.n	8003464 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003464:	697b      	ldr	r3, [r7, #20]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	2000021c 	.word	0x2000021c
 8003474:	200001fc 	.word	0x200001fc
 8003478:	200000f8 	.word	0x200000f8
 800347c:	200001b4 	.word	0x200001b4
 8003480:	200000f4 	.word	0x200000f4
 8003484:	20000208 	.word	0x20000208

08003488 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <vTaskInternalSetTimeOutState+0x24>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <vTaskInternalSetTimeOutState+0x28>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	605a      	str	r2, [r3, #4]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	2000020c 	.word	0x2000020c
 80034b0:	200001f8 	.word	0x200001f8

080034b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <xTaskCheckForTimeOut+0x24>
 80034c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	e7fe      	b.n	80034d6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <xTaskCheckForTimeOut+0x3e>
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	e7fe      	b.n	80034f0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80034f2:	f000 fed3 	bl	800429c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80034f6:	4b1d      	ldr	r3, [pc, #116]	; (800356c <xTaskCheckForTimeOut+0xb8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350e:	d102      	bne.n	8003516 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003510:	2300      	movs	r3, #0
 8003512:	61fb      	str	r3, [r7, #28]
 8003514:	e023      	b.n	800355e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <xTaskCheckForTimeOut+0xbc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d007      	beq.n	8003532 <xTaskCheckForTimeOut+0x7e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800352c:	2301      	movs	r3, #1
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	e015      	b.n	800355e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	429a      	cmp	r2, r3
 800353a:	d20b      	bcs.n	8003554 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	1ad2      	subs	r2, r2, r3
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff ff9d 	bl	8003488 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	e004      	b.n	800355e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800355a:	2301      	movs	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800355e:	f000 fecb 	bl	80042f8 <vPortExitCritical>

	return xReturn;
 8003562:	69fb      	ldr	r3, [r7, #28]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3720      	adds	r7, #32
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	200001f8 	.word	0x200001f8
 8003570:	2000020c 	.word	0x2000020c

08003574 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <vTaskMissedYield+0x14>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	20000208 	.word	0x20000208

0800358c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003594:	f000 f852 	bl	800363c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <prvIdleTask+0x28>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d9f9      	bls.n	8003594 <prvIdleTask+0x8>
			{
				taskYIELD();
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <prvIdleTask+0x2c>)
 80035a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035b0:	e7f0      	b.n	8003594 <prvIdleTask+0x8>
 80035b2:	bf00      	nop
 80035b4:	200000f8 	.word	0x200000f8
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035c2:	2300      	movs	r3, #0
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	e00c      	b.n	80035e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4a12      	ldr	r2, [pc, #72]	; (800361c <prvInitialiseTaskLists+0x60>)
 80035d4:	4413      	add	r3, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe fd34 	bl	8002044 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3301      	adds	r3, #1
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b06      	cmp	r3, #6
 80035e6:	d9ef      	bls.n	80035c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80035e8:	480d      	ldr	r0, [pc, #52]	; (8003620 <prvInitialiseTaskLists+0x64>)
 80035ea:	f7fe fd2b 	bl	8002044 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035ee:	480d      	ldr	r0, [pc, #52]	; (8003624 <prvInitialiseTaskLists+0x68>)
 80035f0:	f7fe fd28 	bl	8002044 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035f4:	480c      	ldr	r0, [pc, #48]	; (8003628 <prvInitialiseTaskLists+0x6c>)
 80035f6:	f7fe fd25 	bl	8002044 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035fa:	480c      	ldr	r0, [pc, #48]	; (800362c <prvInitialiseTaskLists+0x70>)
 80035fc:	f7fe fd22 	bl	8002044 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003600:	480b      	ldr	r0, [pc, #44]	; (8003630 <prvInitialiseTaskLists+0x74>)
 8003602:	f7fe fd1f 	bl	8002044 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <prvInitialiseTaskLists+0x78>)
 8003608:	4a05      	ldr	r2, [pc, #20]	; (8003620 <prvInitialiseTaskLists+0x64>)
 800360a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800360c:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <prvInitialiseTaskLists+0x7c>)
 800360e:	4a05      	ldr	r2, [pc, #20]	; (8003624 <prvInitialiseTaskLists+0x68>)
 8003610:	601a      	str	r2, [r3, #0]
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	200000f8 	.word	0x200000f8
 8003620:	20000184 	.word	0x20000184
 8003624:	20000198 	.word	0x20000198
 8003628:	200001b4 	.word	0x200001b4
 800362c:	200001c8 	.word	0x200001c8
 8003630:	200001e0 	.word	0x200001e0
 8003634:	200001ac 	.word	0x200001ac
 8003638:	200001b0 	.word	0x200001b0

0800363c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003642:	e019      	b.n	8003678 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003644:	f000 fe2a 	bl	800429c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003648:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <prvCheckTasksWaitingTermination+0x4c>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe fd7f 	bl	8002158 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800365a:	4b0c      	ldr	r3, [pc, #48]	; (800368c <prvCheckTasksWaitingTermination+0x50>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3b01      	subs	r3, #1
 8003660:	4a0a      	ldr	r2, [pc, #40]	; (800368c <prvCheckTasksWaitingTermination+0x50>)
 8003662:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003664:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <prvCheckTasksWaitingTermination+0x54>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3b01      	subs	r3, #1
 800366a:	4a09      	ldr	r2, [pc, #36]	; (8003690 <prvCheckTasksWaitingTermination+0x54>)
 800366c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800366e:	f000 fe43 	bl	80042f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f80e 	bl	8003694 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <prvCheckTasksWaitingTermination+0x54>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e1      	bne.n	8003644 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	200001c8 	.word	0x200001c8
 800368c:	200001f4 	.word	0x200001f4
 8003690:	200001dc 	.word	0x200001dc

08003694 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d108      	bne.n	80036b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 ffd2 	bl	8004654 <vPortFree>
				vPortFree( pxTCB );
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 ffcf 	bl	8004654 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036b6:	e017      	b.n	80036e8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d103      	bne.n	80036ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 ffc6 	bl	8004654 <vPortFree>
	}
 80036c8:	e00e      	b.n	80036e8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d009      	beq.n	80036e8 <prvDeleteTCB+0x54>
 80036d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	e7fe      	b.n	80036e6 <prvDeleteTCB+0x52>
	}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036f6:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <prvResetNextTaskUnblockTime+0x44>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <prvResetNextTaskUnblockTime+0x14>
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <prvResetNextTaskUnblockTime+0x16>
 8003704:	2300      	movs	r3, #0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d004      	beq.n	8003714 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <prvResetNextTaskUnblockTime+0x48>)
 800370c:	f04f 32ff 	mov.w	r2, #4294967295
 8003710:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003712:	e008      	b.n	8003726 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003714:	4b07      	ldr	r3, [pc, #28]	; (8003734 <prvResetNextTaskUnblockTime+0x44>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4a05      	ldr	r2, [pc, #20]	; (8003738 <prvResetNextTaskUnblockTime+0x48>)
 8003724:	6013      	str	r3, [r2, #0]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	200001ac 	.word	0x200001ac
 8003738:	20000214 	.word	0x20000214

0800373c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <xTaskGetSchedulerState+0x34>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800374a:	2301      	movs	r3, #1
 800374c:	607b      	str	r3, [r7, #4]
 800374e:	e008      	b.n	8003762 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <xTaskGetSchedulerState+0x38>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003758:	2302      	movs	r3, #2
 800375a:	607b      	str	r3, [r7, #4]
 800375c:	e001      	b.n	8003762 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800375e:	2300      	movs	r3, #0
 8003760:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003762:	687b      	ldr	r3, [r7, #4]
	}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	20000200 	.word	0x20000200
 8003774:	2000021c 	.word	0x2000021c

08003778 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d06c      	beq.n	8003868 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800378e:	4b39      	ldr	r3, [pc, #228]	; (8003874 <xTaskPriorityDisinherit+0xfc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	429a      	cmp	r2, r3
 8003796:	d009      	beq.n	80037ac <xTaskPriorityDisinherit+0x34>
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	e7fe      	b.n	80037aa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <xTaskPriorityDisinherit+0x50>
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	e7fe      	b.n	80037c6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037cc:	1e5a      	subs	r2, r3, #1
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	429a      	cmp	r2, r3
 80037dc:	d044      	beq.n	8003868 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d140      	bne.n	8003868 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	3304      	adds	r3, #4
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe fcb4 	bl	8002158 <uxListRemove>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d115      	bne.n	8003822 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fa:	491f      	ldr	r1, [pc, #124]	; (8003878 <xTaskPriorityDisinherit+0x100>)
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <xTaskPriorityDisinherit+0xaa>
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	2201      	movs	r2, #1
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43da      	mvns	r2, r3
 8003818:	4b18      	ldr	r3, [pc, #96]	; (800387c <xTaskPriorityDisinherit+0x104>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4013      	ands	r3, r2
 800381e:	4a17      	ldr	r2, [pc, #92]	; (800387c <xTaskPriorityDisinherit+0x104>)
 8003820:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	f1c3 0207 	rsb	r2, r3, #7
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	2201      	movs	r2, #1
 800383c:	409a      	lsls	r2, r3
 800383e:	4b0f      	ldr	r3, [pc, #60]	; (800387c <xTaskPriorityDisinherit+0x104>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	4a0d      	ldr	r2, [pc, #52]	; (800387c <xTaskPriorityDisinherit+0x104>)
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4a08      	ldr	r2, [pc, #32]	; (8003878 <xTaskPriorityDisinherit+0x100>)
 8003856:	441a      	add	r2, r3
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	3304      	adds	r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f7fe fc1d 	bl	800209e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003864:	2301      	movs	r3, #1
 8003866:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003868:	697b      	ldr	r3, [r7, #20]
	}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	200000f4 	.word	0x200000f4
 8003878:	200000f8 	.word	0x200000f8
 800387c:	200001fc 	.word	0x200001fc

08003880 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800388a:	4b29      	ldr	r3, [pc, #164]	; (8003930 <prvAddCurrentTaskToDelayedList+0xb0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003890:	4b28      	ldr	r3, [pc, #160]	; (8003934 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3304      	adds	r3, #4
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe fc5e 	bl	8002158 <uxListRemove>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10b      	bne.n	80038ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80038a2:	4b24      	ldr	r3, [pc, #144]	; (8003934 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	2201      	movs	r2, #1
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43da      	mvns	r2, r3
 80038b0:	4b21      	ldr	r3, [pc, #132]	; (8003938 <prvAddCurrentTaskToDelayedList+0xb8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4013      	ands	r3, r2
 80038b6:	4a20      	ldr	r2, [pc, #128]	; (8003938 <prvAddCurrentTaskToDelayedList+0xb8>)
 80038b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d10a      	bne.n	80038d8 <prvAddCurrentTaskToDelayedList+0x58>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	481a      	ldr	r0, [pc, #104]	; (800393c <prvAddCurrentTaskToDelayedList+0xbc>)
 80038d2:	f7fe fbe4 	bl	800209e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038d6:	e026      	b.n	8003926 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d209      	bcs.n	8003904 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038f0:	4b13      	ldr	r3, [pc, #76]	; (8003940 <prvAddCurrentTaskToDelayedList+0xc0>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f7fe fbf2 	bl	80020e6 <vListInsert>
}
 8003902:	e010      	b.n	8003926 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003904:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <prvAddCurrentTaskToDelayedList+0xb4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3304      	adds	r3, #4
 800390e:	4619      	mov	r1, r3
 8003910:	4610      	mov	r0, r2
 8003912:	f7fe fbe8 	bl	80020e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003916:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	429a      	cmp	r2, r3
 800391e:	d202      	bcs.n	8003926 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003920:	4a09      	ldr	r2, [pc, #36]	; (8003948 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	6013      	str	r3, [r2, #0]
}
 8003926:	bf00      	nop
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	200001f8 	.word	0x200001f8
 8003934:	200000f4 	.word	0x200000f4
 8003938:	200001fc 	.word	0x200001fc
 800393c:	200001e0 	.word	0x200001e0
 8003940:	200001b0 	.word	0x200001b0
 8003944:	200001ac 	.word	0x200001ac
 8003948:	20000214 	.word	0x20000214

0800394c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003956:	f000 fb37 	bl	8003fc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800395a:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <xTimerCreateTimerTask+0x80>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d021      	beq.n	80039a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800396a:	1d3a      	adds	r2, r7, #4
 800396c:	f107 0108 	add.w	r1, r7, #8
 8003970:	f107 030c 	add.w	r3, r7, #12
 8003974:	4618      	mov	r0, r3
 8003976:	f000 ff9b 	bl	80048b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	9202      	str	r2, [sp, #8]
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	2302      	movs	r3, #2
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	2300      	movs	r3, #0
 800398a:	460a      	mov	r2, r1
 800398c:	4910      	ldr	r1, [pc, #64]	; (80039d0 <xTimerCreateTimerTask+0x84>)
 800398e:	4811      	ldr	r0, [pc, #68]	; (80039d4 <xTimerCreateTimerTask+0x88>)
 8003990:	f7ff f8dc 	bl	8002b4c <xTaskCreateStatic>
 8003994:	4602      	mov	r2, r0
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <xTimerCreateTimerTask+0x8c>)
 8003998:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800399a:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <xTimerCreateTimerTask+0x8c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80039a2:	2301      	movs	r3, #1
 80039a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d109      	bne.n	80039c0 <xTimerCreateTimerTask+0x74>
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	e7fe      	b.n	80039be <xTimerCreateTimerTask+0x72>
	return xReturn;
 80039c0:	697b      	ldr	r3, [r7, #20]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000250 	.word	0x20000250
 80039d0:	08005878 	.word	0x08005878
 80039d4:	08003c11 	.word	0x08003c11
 80039d8:	20000254 	.word	0x20000254

080039dc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80039ea:	202c      	movs	r0, #44	; 0x2c
 80039ec:	f000 fd70 	bl	80044d0 <pvPortMalloc>
 80039f0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00d      	beq.n	8003a14 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f844 	bl	8003a94 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8003a14:	697b      	ldr	r3, [r7, #20]
	}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b08a      	sub	sp, #40	; 0x28
 8003a22:	af02      	add	r7, sp, #8
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8003a2c:	232c      	movs	r3, #44	; 0x2c
 8003a2e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	2b2c      	cmp	r3, #44	; 0x2c
 8003a34:	d009      	beq.n	8003a4a <xTimerCreateStatic+0x2c>
 8003a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	e7fe      	b.n	8003a48 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8003a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <xTimerCreateStatic+0x46>
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	e7fe      	b.n	8003a62 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a66:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f809 	bl	8003a94 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
	}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3720      	adds	r7, #32
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d109      	bne.n	8003abc <prvInitialiseNewTimer+0x28>
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	e7fe      	b.n	8003aba <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d015      	beq.n	8003aee <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003ac2:	f000 fa81 	bl	8003fc8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	6a3a      	ldr	r2, [r7, #32]
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe facb 	bl	8002084 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003aee:	bf00      	nop
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	; 0x28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <xTimerGenericCommand+0x2c>
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	623b      	str	r3, [r7, #32]
 8003b22:	e7fe      	b.n	8003b22 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <xTimerGenericCommand+0x94>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d02a      	beq.n	8003b82 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b05      	cmp	r3, #5
 8003b3c:	dc18      	bgt.n	8003b70 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b3e:	f7ff fdfd 	bl	800373c <xTaskGetSchedulerState>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d109      	bne.n	8003b5c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b48:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <xTimerGenericCommand+0x94>)
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	f107 0114 	add.w	r1, r7, #20
 8003b50:	2300      	movs	r3, #0
 8003b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b54:	f7fe fc24 	bl	80023a0 <xQueueGenericSend>
 8003b58:	6278      	str	r0, [r7, #36]	; 0x24
 8003b5a:	e012      	b.n	8003b82 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <xTimerGenericCommand+0x94>)
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	f107 0114 	add.w	r1, r7, #20
 8003b64:	2300      	movs	r3, #0
 8003b66:	2200      	movs	r2, #0
 8003b68:	f7fe fc1a 	bl	80023a0 <xQueueGenericSend>
 8003b6c:	6278      	str	r0, [r7, #36]	; 0x24
 8003b6e:	e008      	b.n	8003b82 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <xTimerGenericCommand+0x94>)
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	f107 0114 	add.w	r1, r7, #20
 8003b78:	2300      	movs	r3, #0
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	f7fe fd0a 	bl	8002594 <xQueueGenericSendFromISR>
 8003b80:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3728      	adds	r7, #40	; 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	20000250 	.word	0x20000250

08003b90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b9a:	4b1c      	ldr	r3, [pc, #112]	; (8003c0c <prvProcessExpiredTimer+0x7c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe fad5 	bl	8002158 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d121      	bne.n	8003bfa <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	18d1      	adds	r1, r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	6978      	ldr	r0, [r7, #20]
 8003bc4:	f000 f8c8 	bl	8003d58 <prvInsertTimerInActiveList>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d015      	beq.n	8003bfa <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	6978      	ldr	r0, [r7, #20]
 8003bda:	f7ff ff8d 	bl	8003af8 <xTimerGenericCommand>
 8003bde:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <prvProcessExpiredTimer+0x6a>
 8003be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	e7fe      	b.n	8003bf8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	6978      	ldr	r0, [r7, #20]
 8003c00:	4798      	blx	r3
}
 8003c02:	bf00      	nop
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000248 	.word	0x20000248

08003c10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c18:	f107 0308 	add.w	r3, r7, #8
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 f857 	bl	8003cd0 <prvGetNextExpireTime>
 8003c22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4619      	mov	r1, r3
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f803 	bl	8003c34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c2e:	f000 f8d5 	bl	8003ddc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c32:	e7f1      	b.n	8003c18 <prvTimerTask+0x8>

08003c34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c3e:	f7ff f9a3 	bl	8002f88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c42:	f107 0308 	add.w	r3, r7, #8
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 f866 	bl	8003d18 <prvSampleTimeNow>
 8003c4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d130      	bne.n	8003cb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10a      	bne.n	8003c70 <prvProcessTimerOrBlockTask+0x3c>
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d806      	bhi.n	8003c70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c62:	f7ff f99f 	bl	8002fa4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ff91 	bl	8003b90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c6e:	e024      	b.n	8003cba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c76:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <prvProcessTimerOrBlockTask+0x90>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <prvProcessTimerOrBlockTask+0x94>)
 8003c8a:	6818      	ldr	r0, [r3, #0]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	4619      	mov	r1, r3
 8003c96:	f7fe ff25 	bl	8002ae4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c9a:	f7ff f983 	bl	8002fa4 <xTaskResumeAll>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10a      	bne.n	8003cba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003ca4:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <prvProcessTimerOrBlockTask+0x98>)
 8003ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	f3bf 8f6f 	isb	sy
}
 8003cb4:	e001      	b.n	8003cba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003cb6:	f7ff f975 	bl	8002fa4 <xTaskResumeAll>
}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	2000024c 	.word	0x2000024c
 8003cc8:	20000250 	.word	0x20000250
 8003ccc:	e000ed04 	.word	0xe000ed04

08003cd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <prvGetNextExpireTime+0x44>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d105      	bne.n	8003d02 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <prvGetNextExpireTime+0x44>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	e001      	b.n	8003d06 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d06:	68fb      	ldr	r3, [r7, #12]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	20000248 	.word	0x20000248

08003d18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d20:	f7ff f9dc 	bl	80030dc <xTaskGetTickCount>
 8003d24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <prvSampleTimeNow+0x3c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d205      	bcs.n	8003d3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d30:	f000 f8ea 	bl	8003f08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	e002      	b.n	8003d42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d42:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <prvSampleTimeNow+0x3c>)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d48:	68fb      	ldr	r3, [r7, #12]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000258 	.word	0x20000258

08003d58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d812      	bhi.n	8003da4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	1ad2      	subs	r2, r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d302      	bcc.n	8003d92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	e01b      	b.n	8003dca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <prvInsertTimerInActiveList+0x7c>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	f7fe f9a2 	bl	80020e6 <vListInsert>
 8003da2:	e012      	b.n	8003dca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d206      	bcs.n	8003dba <prvInsertTimerInActiveList+0x62>
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d302      	bcc.n	8003dba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003db4:	2301      	movs	r3, #1
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	e007      	b.n	8003dca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <prvInsertTimerInActiveList+0x80>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	f7fe f98e 	bl	80020e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003dca:	697b      	ldr	r3, [r7, #20]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	2000024c 	.word	0x2000024c
 8003dd8:	20000248 	.word	0x20000248

08003ddc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08c      	sub	sp, #48	; 0x30
 8003de0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003de2:	e07f      	b.n	8003ee4 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	db7b      	blt.n	8003ee2 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d004      	beq.n	8003e00 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	3304      	adds	r3, #4
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe f9ac 	bl	8002158 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e00:	1d3b      	adds	r3, r7, #4
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff ff88 	bl	8003d18 <prvSampleTimeNow>
 8003e08:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b09      	cmp	r3, #9
 8003e0e:	d869      	bhi.n	8003ee4 <prvProcessReceivedCommands+0x108>
 8003e10:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <prvProcessReceivedCommands+0x3c>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e41 	.word	0x08003e41
 8003e1c:	08003e41 	.word	0x08003e41
 8003e20:	08003e41 	.word	0x08003e41
 8003e24:	08003ee5 	.word	0x08003ee5
 8003e28:	08003e9b 	.word	0x08003e9b
 8003e2c:	08003ed1 	.word	0x08003ed1
 8003e30:	08003e41 	.word	0x08003e41
 8003e34:	08003e41 	.word	0x08003e41
 8003e38:	08003ee5 	.word	0x08003ee5
 8003e3c:	08003e9b 	.word	0x08003e9b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	18d1      	adds	r1, r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a3a      	ldr	r2, [r7, #32]
 8003e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e4e:	f7ff ff83 	bl	8003d58 <prvInsertTimerInActiveList>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d045      	beq.n	8003ee4 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e5e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d13d      	bne.n	8003ee4 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	441a      	add	r2, r3
 8003e70:	2300      	movs	r3, #0
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	2300      	movs	r3, #0
 8003e76:	2100      	movs	r1, #0
 8003e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e7a:	f7ff fe3d 	bl	8003af8 <xTimerGenericCommand>
 8003e7e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d12e      	bne.n	8003ee4 <prvProcessReceivedCommands+0x108>
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	61bb      	str	r3, [r7, #24]
 8003e98:	e7fe      	b.n	8003e98 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d109      	bne.n	8003ebc <prvProcessReceivedCommands+0xe0>
 8003ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	e7fe      	b.n	8003eba <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	699a      	ldr	r2, [r3, #24]
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	18d1      	adds	r1, r2, r3
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	6a3a      	ldr	r2, [r7, #32]
 8003ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eca:	f7ff ff45 	bl	8003d58 <prvInsertTimerInActiveList>
					break;
 8003ece:	e009      	b.n	8003ee4 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d104      	bne.n	8003ee4 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8003eda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003edc:	f000 fbba 	bl	8004654 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003ee0:	e000      	b.n	8003ee4 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003ee2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ee4:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <prvProcessReceivedCommands+0x128>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f107 0108 	add.w	r1, r7, #8
 8003eec:	2200      	movs	r2, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe fbe4 	bl	80026bc <xQueueReceive>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f47f af74 	bne.w	8003de4 <prvProcessReceivedCommands+0x8>
	}
}
 8003efc:	bf00      	nop
 8003efe:	3728      	adds	r7, #40	; 0x28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000250 	.word	0x20000250

08003f08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f0e:	e044      	b.n	8003f9a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f10:	4b2b      	ldr	r3, [pc, #172]	; (8003fc0 <prvSwitchTimerLists+0xb8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f1a:	4b29      	ldr	r3, [pc, #164]	; (8003fc0 <prvSwitchTimerLists+0xb8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe f915 	bl	8002158 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d12d      	bne.n	8003f9a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4413      	add	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d90e      	bls.n	8003f6e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f5c:	4b18      	ldr	r3, [pc, #96]	; (8003fc0 <prvSwitchTimerLists+0xb8>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f7fe f8bd 	bl	80020e6 <vListInsert>
 8003f6c:	e015      	b.n	8003f9a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f6e:	2300      	movs	r3, #0
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	2300      	movs	r3, #0
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	2100      	movs	r1, #0
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f7ff fdbd 	bl	8003af8 <xTimerGenericCommand>
 8003f7e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <prvSwitchTimerLists+0x92>
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	e7fe      	b.n	8003f98 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <prvSwitchTimerLists+0xb8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1b5      	bne.n	8003f10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <prvSwitchTimerLists+0xb8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <prvSwitchTimerLists+0xbc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <prvSwitchTimerLists+0xb8>)
 8003fb0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003fb2:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <prvSwitchTimerLists+0xbc>)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	6013      	str	r3, [r2, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000248 	.word	0x20000248
 8003fc4:	2000024c 	.word	0x2000024c

08003fc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003fce:	f000 f965 	bl	800429c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <prvCheckForValidListAndQueue+0x60>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d120      	bne.n	800401c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003fda:	4814      	ldr	r0, [pc, #80]	; (800402c <prvCheckForValidListAndQueue+0x64>)
 8003fdc:	f7fe f832 	bl	8002044 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003fe0:	4813      	ldr	r0, [pc, #76]	; (8004030 <prvCheckForValidListAndQueue+0x68>)
 8003fe2:	f7fe f82f 	bl	8002044 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003fe6:	4b13      	ldr	r3, [pc, #76]	; (8004034 <prvCheckForValidListAndQueue+0x6c>)
 8003fe8:	4a10      	ldr	r2, [pc, #64]	; (800402c <prvCheckForValidListAndQueue+0x64>)
 8003fea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003fec:	4b12      	ldr	r3, [pc, #72]	; (8004038 <prvCheckForValidListAndQueue+0x70>)
 8003fee:	4a10      	ldr	r2, [pc, #64]	; (8004030 <prvCheckForValidListAndQueue+0x68>)
 8003ff0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	4b11      	ldr	r3, [pc, #68]	; (800403c <prvCheckForValidListAndQueue+0x74>)
 8003ff8:	4a11      	ldr	r2, [pc, #68]	; (8004040 <prvCheckForValidListAndQueue+0x78>)
 8003ffa:	210c      	movs	r1, #12
 8003ffc:	200a      	movs	r0, #10
 8003ffe:	f7fe f93d 	bl	800227c <xQueueGenericCreateStatic>
 8004002:	4602      	mov	r2, r0
 8004004:	4b08      	ldr	r3, [pc, #32]	; (8004028 <prvCheckForValidListAndQueue+0x60>)
 8004006:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004008:	4b07      	ldr	r3, [pc, #28]	; (8004028 <prvCheckForValidListAndQueue+0x60>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <prvCheckForValidListAndQueue+0x60>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	490b      	ldr	r1, [pc, #44]	; (8004044 <prvCheckForValidListAndQueue+0x7c>)
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe fd3c 	bl	8002a94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800401c:	f000 f96c 	bl	80042f8 <vPortExitCritical>
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000250 	.word	0x20000250
 800402c:	20000220 	.word	0x20000220
 8004030:	20000234 	.word	0x20000234
 8004034:	20000248 	.word	0x20000248
 8004038:	2000024c 	.word	0x2000024c
 800403c:	200002d4 	.word	0x200002d4
 8004040:	2000025c 	.word	0x2000025c
 8004044:	08005880 	.word	0x08005880

08004048 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3b04      	subs	r3, #4
 8004058:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004060:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3b04      	subs	r3, #4
 8004066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f023 0201 	bic.w	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3b04      	subs	r3, #4
 8004076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004078:	4a0c      	ldr	r2, [pc, #48]	; (80040ac <pxPortInitialiseStack+0x64>)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3b14      	subs	r3, #20
 8004082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3b04      	subs	r3, #4
 800408e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f06f 0202 	mvn.w	r2, #2
 8004096:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3b20      	subs	r3, #32
 800409c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800409e:	68fb      	ldr	r3, [r7, #12]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	080040b1 	.word	0x080040b1

080040b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <prvTaskExitError+0x50>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c2:	d009      	beq.n	80040d8 <prvTaskExitError+0x28>
 80040c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	e7fe      	b.n	80040d6 <prvTaskExitError+0x26>
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040ea:	bf00      	nop
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0fc      	beq.n	80040ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20000008 	.word	0x20000008
	...

08004110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <pxCurrentTCBConst2>)
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	6808      	ldr	r0, [r1, #0]
 8004116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411a:	f380 8809 	msr	PSP, r0
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f380 8811 	msr	BASEPRI, r0
 800412a:	4770      	bx	lr
 800412c:	f3af 8000 	nop.w

08004130 <pxCurrentTCBConst2>:
 8004130:	200000f4 	.word	0x200000f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop

08004138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004138:	4808      	ldr	r0, [pc, #32]	; (800415c <prvPortStartFirstTask+0x24>)
 800413a:	6800      	ldr	r0, [r0, #0]
 800413c:	6800      	ldr	r0, [r0, #0]
 800413e:	f380 8808 	msr	MSP, r0
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f380 8814 	msr	CONTROL, r0
 800414a:	b662      	cpsie	i
 800414c:	b661      	cpsie	f
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	df00      	svc	0
 8004158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800415a:	bf00      	nop
 800415c:	e000ed08 	.word	0xe000ed08

08004160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004166:	4b44      	ldr	r3, [pc, #272]	; (8004278 <xPortStartScheduler+0x118>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a44      	ldr	r2, [pc, #272]	; (800427c <xPortStartScheduler+0x11c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d109      	bne.n	8004184 <xPortStartScheduler+0x24>
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	e7fe      	b.n	8004182 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004184:	4b3c      	ldr	r3, [pc, #240]	; (8004278 <xPortStartScheduler+0x118>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a3d      	ldr	r2, [pc, #244]	; (8004280 <xPortStartScheduler+0x120>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d109      	bne.n	80041a2 <xPortStartScheduler+0x42>
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	e7fe      	b.n	80041a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041a2:	4b38      	ldr	r3, [pc, #224]	; (8004284 <xPortStartScheduler+0x124>)
 80041a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	22ff      	movs	r2, #255	; 0xff
 80041b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	4b30      	ldr	r3, [pc, #192]	; (8004288 <xPortStartScheduler+0x128>)
 80041c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041ca:	4b30      	ldr	r3, [pc, #192]	; (800428c <xPortStartScheduler+0x12c>)
 80041cc:	2207      	movs	r2, #7
 80041ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041d0:	e009      	b.n	80041e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80041d2:	4b2e      	ldr	r3, [pc, #184]	; (800428c <xPortStartScheduler+0x12c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	4a2c      	ldr	r2, [pc, #176]	; (800428c <xPortStartScheduler+0x12c>)
 80041da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ee:	2b80      	cmp	r3, #128	; 0x80
 80041f0:	d0ef      	beq.n	80041d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041f2:	4b26      	ldr	r3, [pc, #152]	; (800428c <xPortStartScheduler+0x12c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f1c3 0307 	rsb	r3, r3, #7
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d009      	beq.n	8004212 <xPortStartScheduler+0xb2>
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	e7fe      	b.n	8004210 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004212:	4b1e      	ldr	r3, [pc, #120]	; (800428c <xPortStartScheduler+0x12c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	4a1c      	ldr	r2, [pc, #112]	; (800428c <xPortStartScheduler+0x12c>)
 800421a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800421c:	4b1b      	ldr	r3, [pc, #108]	; (800428c <xPortStartScheduler+0x12c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004224:	4a19      	ldr	r2, [pc, #100]	; (800428c <xPortStartScheduler+0x12c>)
 8004226:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004230:	4b17      	ldr	r3, [pc, #92]	; (8004290 <xPortStartScheduler+0x130>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a16      	ldr	r2, [pc, #88]	; (8004290 <xPortStartScheduler+0x130>)
 8004236:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800423a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800423c:	4b14      	ldr	r3, [pc, #80]	; (8004290 <xPortStartScheduler+0x130>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a13      	ldr	r2, [pc, #76]	; (8004290 <xPortStartScheduler+0x130>)
 8004242:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004246:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004248:	f000 f8d6 	bl	80043f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800424c:	4b11      	ldr	r3, [pc, #68]	; (8004294 <xPortStartScheduler+0x134>)
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004252:	f000 f8f5 	bl	8004440 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004256:	4b10      	ldr	r3, [pc, #64]	; (8004298 <xPortStartScheduler+0x138>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a0f      	ldr	r2, [pc, #60]	; (8004298 <xPortStartScheduler+0x138>)
 800425c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004260:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004262:	f7ff ff69 	bl	8004138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004266:	f7ff f805 	bl	8003274 <vTaskSwitchContext>
	prvTaskExitError();
 800426a:	f7ff ff21 	bl	80040b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	e000ed00 	.word	0xe000ed00
 800427c:	410fc271 	.word	0x410fc271
 8004280:	410fc270 	.word	0x410fc270
 8004284:	e000e400 	.word	0xe000e400
 8004288:	2000031c 	.word	0x2000031c
 800428c:	20000320 	.word	0x20000320
 8004290:	e000ed20 	.word	0xe000ed20
 8004294:	20000008 	.word	0x20000008
 8004298:	e000ef34 	.word	0xe000ef34

0800429c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <vPortEnterCritical+0x54>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3301      	adds	r3, #1
 80042ba:	4a0d      	ldr	r2, [pc, #52]	; (80042f0 <vPortEnterCritical+0x54>)
 80042bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <vPortEnterCritical+0x54>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d10e      	bne.n	80042e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042c6:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <vPortEnterCritical+0x58>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d009      	beq.n	80042e4 <vPortEnterCritical+0x48>
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	e7fe      	b.n	80042e2 <vPortEnterCritical+0x46>
	}
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	20000008 	.word	0x20000008
 80042f4:	e000ed04 	.word	0xe000ed04

080042f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042fe:	4b11      	ldr	r3, [pc, #68]	; (8004344 <vPortExitCritical+0x4c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d109      	bne.n	800431a <vPortExitCritical+0x22>
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	607b      	str	r3, [r7, #4]
 8004318:	e7fe      	b.n	8004318 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800431a:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <vPortExitCritical+0x4c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3b01      	subs	r3, #1
 8004320:	4a08      	ldr	r2, [pc, #32]	; (8004344 <vPortExitCritical+0x4c>)
 8004322:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004324:	4b07      	ldr	r3, [pc, #28]	; (8004344 <vPortExitCritical+0x4c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d104      	bne.n	8004336 <vPortExitCritical+0x3e>
 800432c:	2300      	movs	r3, #0
 800432e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000008 	.word	0x20000008
	...

08004350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004350:	f3ef 8009 	mrs	r0, PSP
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <pxCurrentTCBConst>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	f01e 0f10 	tst.w	lr, #16
 8004360:	bf08      	it	eq
 8004362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436a:	6010      	str	r0, [r2, #0]
 800436c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004374:	f380 8811 	msr	BASEPRI, r0
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f7fe ff78 	bl	8003274 <vTaskSwitchContext>
 8004384:	f04f 0000 	mov.w	r0, #0
 8004388:	f380 8811 	msr	BASEPRI, r0
 800438c:	bc09      	pop	{r0, r3}
 800438e:	6819      	ldr	r1, [r3, #0]
 8004390:	6808      	ldr	r0, [r1, #0]
 8004392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004396:	f01e 0f10 	tst.w	lr, #16
 800439a:	bf08      	it	eq
 800439c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043a0:	f380 8809 	msr	PSP, r0
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	f3af 8000 	nop.w

080043b0 <pxCurrentTCBConst>:
 80043b0:	200000f4 	.word	0x200000f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop

080043b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043d0:	f7fe fe94 	bl	80030fc <xTaskIncrementTick>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <xPortSysTickHandler+0x3c>)
 80043dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	2300      	movs	r3, #0
 80043e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	e000ed04 	.word	0xe000ed04

080043f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043fc:	4b0b      	ldr	r3, [pc, #44]	; (800442c <vPortSetupTimerInterrupt+0x34>)
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004402:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <vPortSetupTimerInterrupt+0x38>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <vPortSetupTimerInterrupt+0x3c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <vPortSetupTimerInterrupt+0x40>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	4a09      	ldr	r2, [pc, #36]	; (800443c <vPortSetupTimerInterrupt+0x44>)
 8004416:	3b01      	subs	r3, #1
 8004418:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800441a:	4b04      	ldr	r3, [pc, #16]	; (800442c <vPortSetupTimerInterrupt+0x34>)
 800441c:	2207      	movs	r2, #7
 800441e:	601a      	str	r2, [r3, #0]
}
 8004420:	bf00      	nop
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	e000e010 	.word	0xe000e010
 8004430:	e000e018 	.word	0xe000e018
 8004434:	20000070 	.word	0x20000070
 8004438:	10624dd3 	.word	0x10624dd3
 800443c:	e000e014 	.word	0xe000e014

08004440 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004440:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004450 <vPortEnableVFP+0x10>
 8004444:	6801      	ldr	r1, [r0, #0]
 8004446:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800444a:	6001      	str	r1, [r0, #0]
 800444c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800444e:	bf00      	nop
 8004450:	e000ed88 	.word	0xe000ed88

08004454 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800445a:	f3ef 8305 	mrs	r3, IPSR
 800445e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b0f      	cmp	r3, #15
 8004464:	d913      	bls.n	800448e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004466:	4a16      	ldr	r2, [pc, #88]	; (80044c0 <vPortValidateInterruptPriority+0x6c>)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004470:	4b14      	ldr	r3, [pc, #80]	; (80044c4 <vPortValidateInterruptPriority+0x70>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	7afa      	ldrb	r2, [r7, #11]
 8004476:	429a      	cmp	r2, r3
 8004478:	d209      	bcs.n	800448e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	607b      	str	r3, [r7, #4]
 800448c:	e7fe      	b.n	800448c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800448e:	4b0e      	ldr	r3, [pc, #56]	; (80044c8 <vPortValidateInterruptPriority+0x74>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004496:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <vPortValidateInterruptPriority+0x78>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d909      	bls.n	80044b2 <vPortValidateInterruptPriority+0x5e>
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	e7fe      	b.n	80044b0 <vPortValidateInterruptPriority+0x5c>
	}
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	e000e3f0 	.word	0xe000e3f0
 80044c4:	2000031c 	.word	0x2000031c
 80044c8:	e000ed0c 	.word	0xe000ed0c
 80044cc:	20000320 	.word	0x20000320

080044d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	; 0x28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044dc:	f7fe fd54 	bl	8002f88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044e0:	4b57      	ldr	r3, [pc, #348]	; (8004640 <pvPortMalloc+0x170>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044e8:	f000 f90c 	bl	8004704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044ec:	4b55      	ldr	r3, [pc, #340]	; (8004644 <pvPortMalloc+0x174>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f040 808c 	bne.w	8004612 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01c      	beq.n	800453a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004500:	2208      	movs	r2, #8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4413      	add	r3, r2
 8004506:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	2b00      	cmp	r3, #0
 8004510:	d013      	beq.n	800453a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f023 0307 	bic.w	r3, r3, #7
 8004518:	3308      	adds	r3, #8
 800451a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <pvPortMalloc+0x6a>
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	e7fe      	b.n	8004538 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d068      	beq.n	8004612 <pvPortMalloc+0x142>
 8004540:	4b41      	ldr	r3, [pc, #260]	; (8004648 <pvPortMalloc+0x178>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	429a      	cmp	r2, r3
 8004548:	d863      	bhi.n	8004612 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800454a:	4b40      	ldr	r3, [pc, #256]	; (800464c <pvPortMalloc+0x17c>)
 800454c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800454e:	4b3f      	ldr	r3, [pc, #252]	; (800464c <pvPortMalloc+0x17c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004554:	e004      	b.n	8004560 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	429a      	cmp	r2, r3
 8004568:	d903      	bls.n	8004572 <pvPortMalloc+0xa2>
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f1      	bne.n	8004556 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004572:	4b33      	ldr	r3, [pc, #204]	; (8004640 <pvPortMalloc+0x170>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004578:	429a      	cmp	r2, r3
 800457a:	d04a      	beq.n	8004612 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2208      	movs	r2, #8
 8004582:	4413      	add	r3, r2
 8004584:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	1ad2      	subs	r2, r2, r3
 8004596:	2308      	movs	r3, #8
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	429a      	cmp	r2, r3
 800459c:	d91e      	bls.n	80045dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800459e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4413      	add	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <pvPortMalloc+0xf4>
 80045b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	e7fe      	b.n	80045c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	1ad2      	subs	r2, r2, r3
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045d6:	69b8      	ldr	r0, [r7, #24]
 80045d8:	f000 f8f6 	bl	80047c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <pvPortMalloc+0x178>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	4a18      	ldr	r2, [pc, #96]	; (8004648 <pvPortMalloc+0x178>)
 80045e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045ea:	4b17      	ldr	r3, [pc, #92]	; (8004648 <pvPortMalloc+0x178>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4b18      	ldr	r3, [pc, #96]	; (8004650 <pvPortMalloc+0x180>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d203      	bcs.n	80045fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <pvPortMalloc+0x178>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a15      	ldr	r2, [pc, #84]	; (8004650 <pvPortMalloc+0x180>)
 80045fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	4b10      	ldr	r3, [pc, #64]	; (8004644 <pvPortMalloc+0x174>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	431a      	orrs	r2, r3
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004612:	f7fe fcc7 	bl	8002fa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	2b00      	cmp	r3, #0
 800461e:	d009      	beq.n	8004634 <pvPortMalloc+0x164>
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e7fe      	b.n	8004632 <pvPortMalloc+0x162>
	return pvReturn;
 8004634:	69fb      	ldr	r3, [r7, #28]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3728      	adds	r7, #40	; 0x28
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20003f2c 	.word	0x20003f2c
 8004644:	20003f38 	.word	0x20003f38
 8004648:	20003f30 	.word	0x20003f30
 800464c:	20003f24 	.word	0x20003f24
 8004650:	20003f34 	.word	0x20003f34

08004654 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d046      	beq.n	80046f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004666:	2308      	movs	r3, #8
 8004668:	425b      	negs	r3, r3
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	4413      	add	r3, r2
 800466e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	4b20      	ldr	r3, [pc, #128]	; (80046fc <vPortFree+0xa8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4013      	ands	r3, r2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d109      	bne.n	8004696 <vPortFree+0x42>
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	e7fe      	b.n	8004694 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <vPortFree+0x5e>
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	e7fe      	b.n	80046b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	4b11      	ldr	r3, [pc, #68]	; (80046fc <vPortFree+0xa8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d019      	beq.n	80046f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d115      	bne.n	80046f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <vPortFree+0xa8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	401a      	ands	r2, r3
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046d8:	f7fe fc56 	bl	8002f88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <vPortFree+0xac>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4413      	add	r3, r2
 80046e6:	4a06      	ldr	r2, [pc, #24]	; (8004700 <vPortFree+0xac>)
 80046e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046ea:	6938      	ldr	r0, [r7, #16]
 80046ec:	f000 f86c 	bl	80047c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80046f0:	f7fe fc58 	bl	8002fa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046f4:	bf00      	nop
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20003f38 	.word	0x20003f38
 8004700:	20003f30 	.word	0x20003f30

08004704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800470a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800470e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004710:	4b27      	ldr	r3, [pc, #156]	; (80047b0 <prvHeapInit+0xac>)
 8004712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00c      	beq.n	8004738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3307      	adds	r3, #7
 8004722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0307 	bic.w	r3, r3, #7
 800472a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	4a1f      	ldr	r2, [pc, #124]	; (80047b0 <prvHeapInit+0xac>)
 8004734:	4413      	add	r3, r2
 8004736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800473c:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <prvHeapInit+0xb0>)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004742:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <prvHeapInit+0xb0>)
 8004744:	2200      	movs	r2, #0
 8004746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	4413      	add	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004750:	2208      	movs	r2, #8
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0307 	bic.w	r3, r3, #7
 800475e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a15      	ldr	r2, [pc, #84]	; (80047b8 <prvHeapInit+0xb4>)
 8004764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004766:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <prvHeapInit+0xb4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2200      	movs	r2, #0
 800476c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800476e:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <prvHeapInit+0xb4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	1ad2      	subs	r2, r2, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <prvHeapInit+0xb4>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <prvHeapInit+0xb8>)
 8004792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <prvHeapInit+0xbc>)
 800479a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800479c:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <prvHeapInit+0xc0>)
 800479e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047a2:	601a      	str	r2, [r3, #0]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	20000324 	.word	0x20000324
 80047b4:	20003f24 	.word	0x20003f24
 80047b8:	20003f2c 	.word	0x20003f2c
 80047bc:	20003f34 	.word	0x20003f34
 80047c0:	20003f30 	.word	0x20003f30
 80047c4:	20003f38 	.word	0x20003f38

080047c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047d0:	4b28      	ldr	r3, [pc, #160]	; (8004874 <prvInsertBlockIntoFreeList+0xac>)
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	e002      	b.n	80047dc <prvInsertBlockIntoFreeList+0x14>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d8f7      	bhi.n	80047d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	4413      	add	r3, r2
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d108      	bne.n	800480a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	441a      	add	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	441a      	add	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d118      	bne.n	8004850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4b15      	ldr	r3, [pc, #84]	; (8004878 <prvInsertBlockIntoFreeList+0xb0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d00d      	beq.n	8004846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	441a      	add	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	e008      	b.n	8004858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004846:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <prvInsertBlockIntoFreeList+0xb0>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	e003      	b.n	8004858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	429a      	cmp	r2, r3
 800485e:	d002      	beq.n	8004866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004866:	bf00      	nop
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20003f24 	.word	0x20003f24
 8004878:	20003f2c 	.word	0x20003f2c

0800487c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4a07      	ldr	r2, [pc, #28]	; (80048a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800488c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4a06      	ldr	r2, [pc, #24]	; (80048ac <vApplicationGetIdleTaskMemory+0x30>)
 8004892:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2280      	movs	r2, #128	; 0x80
 8004898:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	20003f3c 	.word	0x20003f3c
 80048ac:	20003f90 	.word	0x20003f90

080048b0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a07      	ldr	r2, [pc, #28]	; (80048dc <vApplicationGetTimerTaskMemory+0x2c>)
 80048c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4a06      	ldr	r2, [pc, #24]	; (80048e0 <vApplicationGetTimerTaskMemory+0x30>)
 80048c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048ce:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	20004190 	.word	0x20004190
 80048e0:	200041e4 	.word	0x200041e4

080048e4 <HX711_Init>:
#include "hx711.h"

void HX711_Init(HX711 data)
{
 80048e4:	b084      	sub	sp, #16
 80048e6:	b580      	push	{r7, lr}
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	f107 0c08 	add.w	ip, r7, #8
 80048ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
//	GPIO_InitStruct.Pull = GPIO_PULLUP;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(data.gpioData, &GPIO_InitStruct);

	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	8a39      	ldrh	r1, [r7, #16]
 80048f6:	2201      	movs	r2, #1
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fc f955 	bl	8000ba8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80048fe:	2032      	movs	r0, #50	; 0x32
 8004900:	f7fb feb0 	bl	8000664 <HAL_Delay>
	HAL_GPIO_WritePin(data.gpioData, data.pinSck, GPIO_PIN_RESET);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8a39      	ldrh	r1, [r7, #16]
 8004908:	2200      	movs	r2, #0
 800490a:	4618      	mov	r0, r3
 800490c:	f7fc f94c 	bl	8000ba8 <HAL_GPIO_WritePin>

}
 8004910:	bf00      	nop
 8004912:	46bd      	mov	sp, r7
 8004914:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004918:	b004      	add	sp, #16
 800491a:	4770      	bx	lr

0800491c <HX711_Value>:

    return sum / times;
}

int HX711_Value(HX711 data)
{
 800491c:	b084      	sub	sp, #16
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	f107 0c18 	add.w	ip, r7, #24
 8004928:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    int buffer;
    buffer = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]

    while (HAL_GPIO_ReadPin(data.gpioData, data.pinData)==1)
 8004930:	bf00      	nop
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f7fc f91d 	bl	8000b78 <HAL_GPIO_ReadPin>
 800493e:	4603      	mov	r3, r0
 8004940:	2b01      	cmp	r3, #1
 8004942:	d0f6      	beq.n	8004932 <HX711_Value+0x16>
    ;

    for (uint8_t i = 0; i < 24; i++)
 8004944:	2300      	movs	r3, #0
 8004946:	72fb      	strb	r3, [r7, #11]
 8004948:	e01d      	b.n	8004986 <HX711_Value+0x6a>
    {
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	8c39      	ldrh	r1, [r7, #32]
 800494e:	2201      	movs	r2, #1
 8004950:	4618      	mov	r0, r3
 8004952:	f7fc f929 	bl	8000ba8 <HAL_GPIO_WritePin>

        buffer = buffer << 1 ;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	60fb      	str	r3, [r7, #12]

        if (HAL_GPIO_ReadPin(data.gpioData, data.pinData))
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004960:	4611      	mov	r1, r2
 8004962:	4618      	mov	r0, r3
 8004964:	f7fc f908 	bl	8000b78 <HAL_GPIO_ReadPin>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <HX711_Value+0x58>
        {
            buffer ++;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3301      	adds	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
        }

        HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	8c39      	ldrh	r1, [r7, #32]
 8004978:	2200      	movs	r2, #0
 800497a:	4618      	mov	r0, r3
 800497c:	f7fc f914 	bl	8000ba8 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 24; i++)
 8004980:	7afb      	ldrb	r3, [r7, #11]
 8004982:	3301      	adds	r3, #1
 8004984:	72fb      	strb	r3, [r7, #11]
 8004986:	7afb      	ldrb	r3, [r7, #11]
 8004988:	2b17      	cmp	r3, #23
 800498a:	d9de      	bls.n	800494a <HX711_Value+0x2e>
    }

    for (int i = 0; i < data.gain; i++)
 800498c:	2300      	movs	r3, #0
 800498e:	607b      	str	r3, [r7, #4]
 8004990:	e00e      	b.n	80049b0 <HX711_Value+0x94>
    {
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	8c39      	ldrh	r1, [r7, #32]
 8004996:	2201      	movs	r2, #1
 8004998:	4618      	mov	r0, r3
 800499a:	f7fc f905 	bl	8000ba8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	8c39      	ldrh	r1, [r7, #32]
 80049a2:	2200      	movs	r2, #0
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fc f8ff 	bl	8000ba8 <HAL_GPIO_WritePin>
    for (int i = 0; i < data.gain; i++)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3301      	adds	r3, #1
 80049ae:	607b      	str	r3, [r7, #4]
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	dbec      	blt.n	8004992 <HX711_Value+0x76>
    }

    buffer = buffer ^ 0x800000;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 80049be:	60fb      	str	r3, [r7, #12]

    return buffer;
 80049c0:	68fb      	ldr	r3, [r7, #12]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049cc:	b004      	add	sp, #16
 80049ce:	4770      	bx	lr

080049d0 <transmitter>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void transmitter(void *arg){
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80049d8:	2120      	movs	r1, #32
 80049da:	480f      	ldr	r0, [pc, #60]	; (8004a18 <transmitter+0x48>)
 80049dc:	f7fc f8fd 	bl	8000bda <HAL_GPIO_TogglePin>
	meres = HX711_Value(hx11);
 80049e0:	4b0e      	ldr	r3, [pc, #56]	; (8004a1c <transmitter+0x4c>)
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	9200      	str	r2, [sp, #0]
 80049e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049e8:	f7ff ff98 	bl	800491c <HX711_Value>
 80049ec:	4602      	mov	r2, r0
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <transmitter+0x50>)
 80049f0:	601a      	str	r2, [r3, #0]
	sprintf(buffer,"s%d\n\r", meres);
 80049f2:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <transmitter+0x50>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	490a      	ldr	r1, [pc, #40]	; (8004a24 <transmitter+0x54>)
 80049fa:	480b      	ldr	r0, [pc, #44]	; (8004a28 <transmitter+0x58>)
 80049fc:	f000 fb2e 	bl	800505c <siprintf>
	HAL_UART_Transmit(&huart1, &buffer, 20, 1000);
 8004a00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a04:	2214      	movs	r2, #20
 8004a06:	4908      	ldr	r1, [pc, #32]	; (8004a28 <transmitter+0x58>)
 8004a08:	4808      	ldr	r0, [pc, #32]	; (8004a2c <transmitter+0x5c>)
 8004a0a:	f7fc fdb0 	bl	800156e <HAL_UART_Transmit>
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40020000 	.word	0x40020000
 8004a1c:	200046bc 	.word	0x200046bc
 8004a20:	200045e4 	.word	0x200045e4
 8004a24:	08005888 	.word	0x08005888
 8004a28:	2000000c 	.word	0x2000000c
 8004a2c:	2000463c 	.word	0x2000463c

08004a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a30:	b5b0      	push	{r4, r5, r7, lr}
 8004a32:	b08a      	sub	sp, #40	; 0x28
 8004a34:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	  hx11.gpioSck = HX711SCK_GPIO_Port;
 8004a36:	4b21      	ldr	r3, [pc, #132]	; (8004abc <main+0x8c>)
 8004a38:	4a21      	ldr	r2, [pc, #132]	; (8004ac0 <main+0x90>)
 8004a3a:	601a      	str	r2, [r3, #0]
	  hx11.gpioData = HX711DT_GPIO_Port;
 8004a3c:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <main+0x8c>)
 8004a3e:	4a20      	ldr	r2, [pc, #128]	; (8004ac0 <main+0x90>)
 8004a40:	605a      	str	r2, [r3, #4]
	//hx11.gpioSck = GPIOA;
	//hx11.gpioData = GPIOA;
	  hx11.pinSck = HX711SCK_Pin;
 8004a42:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <main+0x8c>)
 8004a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a48:	811a      	strh	r2, [r3, #8]
	  hx11.pinData = HX711DT_Pin;
 8004a4a:	4b1c      	ldr	r3, [pc, #112]	; (8004abc <main+0x8c>)
 8004a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a50:	815a      	strh	r2, [r3, #10]
	  hx11.offset = 0;
 8004a52:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <main+0x8c>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	60da      	str	r2, [r3, #12]
	  hx11.gain = 64;
 8004a58:	4b18      	ldr	r3, [pc, #96]	; (8004abc <main+0x8c>)
 8004a5a:	2240      	movs	r2, #64	; 0x40
 8004a5c:	611a      	str	r2, [r3, #16]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a5e:	f7fb fd8f 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a62:	f000 f835 	bl	8004ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a66:	f000 f8f1 	bl	8004c4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004a6a:	f000 f8c5 	bl	8004bf8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8004a6e:	f000 f899 	bl	8004ba4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HX711_Init(hx11);
 8004a72:	4b12      	ldr	r3, [pc, #72]	; (8004abc <main+0x8c>)
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	9200      	str	r2, [sp, #0]
 8004a78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a7a:	f7ff ff33 	bl	80048e4 <HX711_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004a7e:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <main+0x94>)
 8004a80:	463c      	mov	r4, r7
 8004a82:	461d      	mov	r5, r3
 8004a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004a90:	463b      	mov	r3, r7
 8004a92:	2100      	movs	r1, #0
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fd f9fa 	bl	8001e8e <osThreadCreate>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <main+0x98>)
 8004a9e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osTimerId timer_1 = osTimerCreate(osTimer(tm), osTimerPeriodic, NULL);
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	4809      	ldr	r0, [pc, #36]	; (8004acc <main+0x9c>)
 8004aa6:	f7fd fa53 	bl	8001f50 <osTimerCreate>
 8004aaa:	61f8      	str	r0, [r7, #28]
  osTimerStart(timer_1, 500);
 8004aac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004ab0:	69f8      	ldr	r0, [r7, #28]
 8004ab2:	f7fd fa81 	bl	8001fb8 <osTimerStart>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004ab6:	f7fd f9e3 	bl	8001e80 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004aba:	e7fe      	b.n	8004aba <main+0x8a>
 8004abc:	200046bc 	.word	0x200046bc
 8004ac0:	40020000 	.word	0x40020000
 8004ac4:	0800589c 	.word	0x0800589c
 8004ac8:	20004638 	.word	0x20004638
 8004acc:	080058b8 	.word	0x080058b8

08004ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b094      	sub	sp, #80	; 0x50
 8004ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ad6:	f107 0320 	add.w	r3, r7, #32
 8004ada:	2230      	movs	r2, #48	; 0x30
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fab3 	bl	800504a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ae4:	f107 030c 	add.w	r3, r7, #12
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	609a      	str	r2, [r3, #8]
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004af4:	2300      	movs	r3, #0
 8004af6:	60bb      	str	r3, [r7, #8]
 8004af8:	4b28      	ldr	r3, [pc, #160]	; (8004b9c <SystemClock_Config+0xcc>)
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	4a27      	ldr	r2, [pc, #156]	; (8004b9c <SystemClock_Config+0xcc>)
 8004afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b02:	6413      	str	r3, [r2, #64]	; 0x40
 8004b04:	4b25      	ldr	r3, [pc, #148]	; (8004b9c <SystemClock_Config+0xcc>)
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	60bb      	str	r3, [r7, #8]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b10:	2300      	movs	r3, #0
 8004b12:	607b      	str	r3, [r7, #4]
 8004b14:	4b22      	ldr	r3, [pc, #136]	; (8004ba0 <SystemClock_Config+0xd0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a21      	ldr	r2, [pc, #132]	; (8004ba0 <SystemClock_Config+0xd0>)
 8004b1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	4b1f      	ldr	r3, [pc, #124]	; (8004ba0 <SystemClock_Config+0xd0>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b28:	607b      	str	r3, [r7, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b30:	2301      	movs	r3, #1
 8004b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b34:	2310      	movs	r3, #16
 8004b36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004b40:	2310      	movs	r3, #16
 8004b42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004b44:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004b48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004b4a:	2304      	movs	r3, #4
 8004b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004b4e:	2304      	movs	r3, #4
 8004b50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b52:	f107 0320 	add.w	r3, r7, #32
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fc f85a 	bl	8000c10 <HAL_RCC_OscConfig>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004b62:	f000 f8f9 	bl	8004d58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b66:	230f      	movs	r3, #15
 8004b68:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004b7c:	f107 030c 	add.w	r3, r7, #12
 8004b80:	2102      	movs	r1, #2
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fc fab4 	bl	80010f0 <HAL_RCC_ClockConfig>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004b8e:	f000 f8e3 	bl	8004d58 <Error_Handler>
  }
}
 8004b92:	bf00      	nop
 8004b94:	3750      	adds	r7, #80	; 0x50
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	40007000 	.word	0x40007000

08004ba4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004ba8:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <MX_USART1_UART_Init+0x4c>)
 8004baa:	4a12      	ldr	r2, [pc, #72]	; (8004bf4 <MX_USART1_UART_Init+0x50>)
 8004bac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004bae:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <MX_USART1_UART_Init+0x4c>)
 8004bb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004bb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004bb6:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <MX_USART1_UART_Init+0x4c>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <MX_USART1_UART_Init+0x4c>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <MX_USART1_UART_Init+0x4c>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004bc8:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <MX_USART1_UART_Init+0x4c>)
 8004bca:	220c      	movs	r2, #12
 8004bcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bce:	4b08      	ldr	r3, [pc, #32]	; (8004bf0 <MX_USART1_UART_Init+0x4c>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bd4:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <MX_USART1_UART_Init+0x4c>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004bda:	4805      	ldr	r0, [pc, #20]	; (8004bf0 <MX_USART1_UART_Init+0x4c>)
 8004bdc:	f7fc fc7a 	bl	80014d4 <HAL_UART_Init>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004be6:	f000 f8b7 	bl	8004d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004bea:	bf00      	nop
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	2000463c 	.word	0x2000463c
 8004bf4:	40011000 	.word	0x40011000

08004bf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004bfc:	4b11      	ldr	r3, [pc, #68]	; (8004c44 <MX_USART2_UART_Init+0x4c>)
 8004bfe:	4a12      	ldr	r2, [pc, #72]	; (8004c48 <MX_USART2_UART_Init+0x50>)
 8004c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004c02:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <MX_USART2_UART_Init+0x4c>)
 8004c04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c0a:	4b0e      	ldr	r3, [pc, #56]	; (8004c44 <MX_USART2_UART_Init+0x4c>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <MX_USART2_UART_Init+0x4c>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c16:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <MX_USART2_UART_Init+0x4c>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004c1c:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <MX_USART2_UART_Init+0x4c>)
 8004c1e:	220c      	movs	r2, #12
 8004c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c22:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <MX_USART2_UART_Init+0x4c>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <MX_USART2_UART_Init+0x4c>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c2e:	4805      	ldr	r0, [pc, #20]	; (8004c44 <MX_USART2_UART_Init+0x4c>)
 8004c30:	f7fc fc50 	bl	80014d4 <HAL_UART_Init>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004c3a:	f000 f88d 	bl	8004d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c3e:	bf00      	nop
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	2000467c 	.word	0x2000467c
 8004c48:	40004400 	.word	0x40004400

08004c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08a      	sub	sp, #40	; 0x28
 8004c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c52:	f107 0314 	add.w	r3, r7, #20
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	605a      	str	r2, [r3, #4]
 8004c5c:	609a      	str	r2, [r3, #8]
 8004c5e:	60da      	str	r2, [r3, #12]
 8004c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c62:	2300      	movs	r3, #0
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	4b34      	ldr	r3, [pc, #208]	; (8004d38 <MX_GPIO_Init+0xec>)
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	4a33      	ldr	r2, [pc, #204]	; (8004d38 <MX_GPIO_Init+0xec>)
 8004c6c:	f043 0304 	orr.w	r3, r3, #4
 8004c70:	6313      	str	r3, [r2, #48]	; 0x30
 8004c72:	4b31      	ldr	r3, [pc, #196]	; (8004d38 <MX_GPIO_Init+0xec>)
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	613b      	str	r3, [r7, #16]
 8004c7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	4b2d      	ldr	r3, [pc, #180]	; (8004d38 <MX_GPIO_Init+0xec>)
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	4a2c      	ldr	r2, [pc, #176]	; (8004d38 <MX_GPIO_Init+0xec>)
 8004c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c8e:	4b2a      	ldr	r3, [pc, #168]	; (8004d38 <MX_GPIO_Init+0xec>)
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	4b26      	ldr	r3, [pc, #152]	; (8004d38 <MX_GPIO_Init+0xec>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	4a25      	ldr	r2, [pc, #148]	; (8004d38 <MX_GPIO_Init+0xec>)
 8004ca4:	f043 0301 	orr.w	r3, r3, #1
 8004ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8004caa:	4b23      	ldr	r3, [pc, #140]	; (8004d38 <MX_GPIO_Init+0xec>)
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	60bb      	str	r3, [r7, #8]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	607b      	str	r3, [r7, #4]
 8004cba:	4b1f      	ldr	r3, [pc, #124]	; (8004d38 <MX_GPIO_Init+0xec>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	4a1e      	ldr	r2, [pc, #120]	; (8004d38 <MX_GPIO_Init+0xec>)
 8004cc0:	f043 0302 	orr.w	r3, r3, #2
 8004cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004cc6:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <MX_GPIO_Init+0xec>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	607b      	str	r3, [r7, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|HX711SCK_Pin, GPIO_PIN_RESET);
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004cd8:	4818      	ldr	r0, [pc, #96]	; (8004d3c <MX_GPIO_Init+0xf0>)
 8004cda:	f7fb ff65 	bl	8000ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004cde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004ce4:	4b16      	ldr	r3, [pc, #88]	; (8004d40 <MX_GPIO_Init+0xf4>)
 8004ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004cec:	f107 0314 	add.w	r3, r7, #20
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4814      	ldr	r0, [pc, #80]	; (8004d44 <MX_GPIO_Init+0xf8>)
 8004cf4:	f7fb fdbe 	bl	8000874 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin HX711SCK_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|HX711SCK_Pin;
 8004cf8:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d06:	2300      	movs	r3, #0
 8004d08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d0a:	f107 0314 	add.w	r3, r7, #20
 8004d0e:	4619      	mov	r1, r3
 8004d10:	480a      	ldr	r0, [pc, #40]	; (8004d3c <MX_GPIO_Init+0xf0>)
 8004d12:	f7fb fdaf 	bl	8000874 <HAL_GPIO_Init>

  /*Configure GPIO pin : HX711DT_Pin */
  GPIO_InitStruct.Pin = HX711DT_Pin;
 8004d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HX711DT_GPIO_Port, &GPIO_InitStruct);
 8004d24:	f107 0314 	add.w	r3, r7, #20
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4804      	ldr	r0, [pc, #16]	; (8004d3c <MX_GPIO_Init+0xf0>)
 8004d2c:	f7fb fda2 	bl	8000874 <HAL_GPIO_Init>

}
 8004d30:	bf00      	nop
 8004d32:	3728      	adds	r7, #40	; 0x28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	40020000 	.word	0x40020000
 8004d40:	10210000 	.word	0x10210000
 8004d44:	40020800 	.word	0x40020800

08004d48 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004d50:	2001      	movs	r0, #1
 8004d52:	f7fd f8e8 	bl	8001f26 <osDelay>
 8004d56:	e7fb      	b.n	8004d50 <StartDefaultTask+0x8>

08004d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004d5c:	bf00      	nop
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d6e:	2300      	movs	r3, #0
 8004d70:	607b      	str	r3, [r7, #4]
 8004d72:	4b12      	ldr	r3, [pc, #72]	; (8004dbc <HAL_MspInit+0x54>)
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	4a11      	ldr	r2, [pc, #68]	; (8004dbc <HAL_MspInit+0x54>)
 8004d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <HAL_MspInit+0x54>)
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d86:	607b      	str	r3, [r7, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <HAL_MspInit+0x54>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <HAL_MspInit+0x54>)
 8004d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d98:	6413      	str	r3, [r2, #64]	; 0x40
 8004d9a:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <HAL_MspInit+0x54>)
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004da6:	2200      	movs	r2, #0
 8004da8:	210f      	movs	r1, #15
 8004daa:	f06f 0001 	mvn.w	r0, #1
 8004dae:	f7fb fd38 	bl	8000822 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004db2:	bf00      	nop
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40023800 	.word	0x40023800

08004dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08c      	sub	sp, #48	; 0x30
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc8:	f107 031c 	add.w	r3, r7, #28
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	605a      	str	r2, [r3, #4]
 8004dd2:	609a      	str	r2, [r3, #8]
 8004dd4:	60da      	str	r2, [r3, #12]
 8004dd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a32      	ldr	r2, [pc, #200]	; (8004ea8 <HAL_UART_MspInit+0xe8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d12d      	bne.n	8004e3e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004de2:	2300      	movs	r3, #0
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	4b31      	ldr	r3, [pc, #196]	; (8004eac <HAL_UART_MspInit+0xec>)
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	4a30      	ldr	r2, [pc, #192]	; (8004eac <HAL_UART_MspInit+0xec>)
 8004dec:	f043 0310 	orr.w	r3, r3, #16
 8004df0:	6453      	str	r3, [r2, #68]	; 0x44
 8004df2:	4b2e      	ldr	r3, [pc, #184]	; (8004eac <HAL_UART_MspInit+0xec>)
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	f003 0310 	and.w	r3, r3, #16
 8004dfa:	61bb      	str	r3, [r7, #24]
 8004dfc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	4b2a      	ldr	r3, [pc, #168]	; (8004eac <HAL_UART_MspInit+0xec>)
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	4a29      	ldr	r2, [pc, #164]	; (8004eac <HAL_UART_MspInit+0xec>)
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e0e:	4b27      	ldr	r3, [pc, #156]	; (8004eac <HAL_UART_MspInit+0xec>)
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8004e1a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8004e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e20:	2302      	movs	r3, #2
 8004e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e24:	2301      	movs	r3, #1
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e2c:	2307      	movs	r3, #7
 8004e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e30:	f107 031c 	add.w	r3, r7, #28
 8004e34:	4619      	mov	r1, r3
 8004e36:	481e      	ldr	r0, [pc, #120]	; (8004eb0 <HAL_UART_MspInit+0xf0>)
 8004e38:	f7fb fd1c 	bl	8000874 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004e3c:	e030      	b.n	8004ea0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1c      	ldr	r2, [pc, #112]	; (8004eb4 <HAL_UART_MspInit+0xf4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d12b      	bne.n	8004ea0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e48:	2300      	movs	r3, #0
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	4b17      	ldr	r3, [pc, #92]	; (8004eac <HAL_UART_MspInit+0xec>)
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	4a16      	ldr	r2, [pc, #88]	; (8004eac <HAL_UART_MspInit+0xec>)
 8004e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e56:	6413      	str	r3, [r2, #64]	; 0x40
 8004e58:	4b14      	ldr	r3, [pc, #80]	; (8004eac <HAL_UART_MspInit+0xec>)
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	4b10      	ldr	r3, [pc, #64]	; (8004eac <HAL_UART_MspInit+0xec>)
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6c:	4a0f      	ldr	r2, [pc, #60]	; (8004eac <HAL_UART_MspInit+0xec>)
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	6313      	str	r3, [r2, #48]	; 0x30
 8004e74:	4b0d      	ldr	r3, [pc, #52]	; (8004eac <HAL_UART_MspInit+0xec>)
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004e80:	230c      	movs	r3, #12
 8004e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e84:	2302      	movs	r3, #2
 8004e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e90:	2307      	movs	r3, #7
 8004e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e94:	f107 031c 	add.w	r3, r7, #28
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4805      	ldr	r0, [pc, #20]	; (8004eb0 <HAL_UART_MspInit+0xf0>)
 8004e9c:	f7fb fcea 	bl	8000874 <HAL_GPIO_Init>
}
 8004ea0:	bf00      	nop
 8004ea2:	3730      	adds	r7, #48	; 0x30
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40011000 	.word	0x40011000
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	40020000 	.word	0x40020000
 8004eb4:	40004400 	.word	0x40004400

08004eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ebc:	bf00      	nop
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eca:	e7fe      	b.n	8004eca <HardFault_Handler+0x4>

08004ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ed0:	e7fe      	b.n	8004ed0 <MemManage_Handler+0x4>

08004ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ed6:	e7fe      	b.n	8004ed6 <BusFault_Handler+0x4>

08004ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004edc:	e7fe      	b.n	8004edc <UsageFault_Handler+0x4>

08004ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ee2:	bf00      	nop
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ef0:	f7fb fb98 	bl	8000624 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004ef4:	f7fe fc22 	bl	800373c <xTaskGetSchedulerState>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d001      	beq.n	8004f02 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004efe:	f7ff fa5b 	bl	80043b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f02:	bf00      	nop
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004f10:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <_sbrk+0x50>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d102      	bne.n	8004f1e <_sbrk+0x16>
		heap_end = &end;
 8004f18:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <_sbrk+0x50>)
 8004f1a:	4a10      	ldr	r2, [pc, #64]	; (8004f5c <_sbrk+0x54>)
 8004f1c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004f1e:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <_sbrk+0x50>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004f24:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <_sbrk+0x50>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	466a      	mov	r2, sp
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d907      	bls.n	8004f42 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004f32:	f000 f855 	bl	8004fe0 <__errno>
 8004f36:	4602      	mov	r2, r0
 8004f38:	230c      	movs	r3, #12
 8004f3a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f40:	e006      	b.n	8004f50 <_sbrk+0x48>
	}

	heap_end += incr;
 8004f42:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <_sbrk+0x50>)
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4413      	add	r3, r2
 8004f4a:	4a03      	ldr	r2, [pc, #12]	; (8004f58 <_sbrk+0x50>)
 8004f4c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	200045e8 	.word	0x200045e8
 8004f5c:	200046d8 	.word	0x200046d8

08004f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f64:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <SystemInit+0x28>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	4a07      	ldr	r2, [pc, #28]	; (8004f88 <SystemInit+0x28>)
 8004f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <SystemInit+0x28>)
 8004f76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f7a:	609a      	str	r2, [r3, #8]
#endif
}
 8004f7c:	bf00      	nop
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	e000ed00 	.word	0xe000ed00

08004f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004f90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004f92:	e003      	b.n	8004f9c <LoopCopyDataInit>

08004f94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004f94:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004f96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004f98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004f9a:	3104      	adds	r1, #4

08004f9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004f9c:	480b      	ldr	r0, [pc, #44]	; (8004fcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004f9e:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004fa0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004fa2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004fa4:	d3f6      	bcc.n	8004f94 <CopyDataInit>
  ldr  r2, =_sbss
 8004fa6:	4a0b      	ldr	r2, [pc, #44]	; (8004fd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004fa8:	e002      	b.n	8004fb0 <LoopFillZerobss>

08004faa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004faa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004fac:	f842 3b04 	str.w	r3, [r2], #4

08004fb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004fb0:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004fb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004fb4:	d3f9      	bcc.n	8004faa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004fb6:	f7ff ffd3 	bl	8004f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fba:	f000 f817 	bl	8004fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fbe:	f7ff fd37 	bl	8004a30 <main>
  bx  lr    
 8004fc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004fc4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004fc8:	0800591c 	.word	0x0800591c
  ldr  r0, =_sdata
 8004fcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004fd0:	200000d8 	.word	0x200000d8
  ldr  r2, =_sbss
 8004fd4:	200000d8 	.word	0x200000d8
  ldr  r3, = _ebss
 8004fd8:	200046d4 	.word	0x200046d4

08004fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fdc:	e7fe      	b.n	8004fdc <ADC_IRQHandler>
	...

08004fe0 <__errno>:
 8004fe0:	4b01      	ldr	r3, [pc, #4]	; (8004fe8 <__errno+0x8>)
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	20000074 	.word	0x20000074

08004fec <__libc_init_array>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	4e0d      	ldr	r6, [pc, #52]	; (8005024 <__libc_init_array+0x38>)
 8004ff0:	4c0d      	ldr	r4, [pc, #52]	; (8005028 <__libc_init_array+0x3c>)
 8004ff2:	1ba4      	subs	r4, r4, r6
 8004ff4:	10a4      	asrs	r4, r4, #2
 8004ff6:	2500      	movs	r5, #0
 8004ff8:	42a5      	cmp	r5, r4
 8004ffa:	d109      	bne.n	8005010 <__libc_init_array+0x24>
 8004ffc:	4e0b      	ldr	r6, [pc, #44]	; (800502c <__libc_init_array+0x40>)
 8004ffe:	4c0c      	ldr	r4, [pc, #48]	; (8005030 <__libc_init_array+0x44>)
 8005000:	f000 fc28 	bl	8005854 <_init>
 8005004:	1ba4      	subs	r4, r4, r6
 8005006:	10a4      	asrs	r4, r4, #2
 8005008:	2500      	movs	r5, #0
 800500a:	42a5      	cmp	r5, r4
 800500c:	d105      	bne.n	800501a <__libc_init_array+0x2e>
 800500e:	bd70      	pop	{r4, r5, r6, pc}
 8005010:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005014:	4798      	blx	r3
 8005016:	3501      	adds	r5, #1
 8005018:	e7ee      	b.n	8004ff8 <__libc_init_array+0xc>
 800501a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800501e:	4798      	blx	r3
 8005020:	3501      	adds	r5, #1
 8005022:	e7f2      	b.n	800500a <__libc_init_array+0x1e>
 8005024:	08005914 	.word	0x08005914
 8005028:	08005914 	.word	0x08005914
 800502c:	08005914 	.word	0x08005914
 8005030:	08005918 	.word	0x08005918

08005034 <memcpy>:
 8005034:	b510      	push	{r4, lr}
 8005036:	1e43      	subs	r3, r0, #1
 8005038:	440a      	add	r2, r1
 800503a:	4291      	cmp	r1, r2
 800503c:	d100      	bne.n	8005040 <memcpy+0xc>
 800503e:	bd10      	pop	{r4, pc}
 8005040:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005048:	e7f7      	b.n	800503a <memcpy+0x6>

0800504a <memset>:
 800504a:	4402      	add	r2, r0
 800504c:	4603      	mov	r3, r0
 800504e:	4293      	cmp	r3, r2
 8005050:	d100      	bne.n	8005054 <memset+0xa>
 8005052:	4770      	bx	lr
 8005054:	f803 1b01 	strb.w	r1, [r3], #1
 8005058:	e7f9      	b.n	800504e <memset+0x4>
	...

0800505c <siprintf>:
 800505c:	b40e      	push	{r1, r2, r3}
 800505e:	b500      	push	{lr}
 8005060:	b09c      	sub	sp, #112	; 0x70
 8005062:	ab1d      	add	r3, sp, #116	; 0x74
 8005064:	9002      	str	r0, [sp, #8]
 8005066:	9006      	str	r0, [sp, #24]
 8005068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800506c:	4809      	ldr	r0, [pc, #36]	; (8005094 <siprintf+0x38>)
 800506e:	9107      	str	r1, [sp, #28]
 8005070:	9104      	str	r1, [sp, #16]
 8005072:	4909      	ldr	r1, [pc, #36]	; (8005098 <siprintf+0x3c>)
 8005074:	f853 2b04 	ldr.w	r2, [r3], #4
 8005078:	9105      	str	r1, [sp, #20]
 800507a:	6800      	ldr	r0, [r0, #0]
 800507c:	9301      	str	r3, [sp, #4]
 800507e:	a902      	add	r1, sp, #8
 8005080:	f000 f866 	bl	8005150 <_svfiprintf_r>
 8005084:	9b02      	ldr	r3, [sp, #8]
 8005086:	2200      	movs	r2, #0
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	b01c      	add	sp, #112	; 0x70
 800508c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005090:	b003      	add	sp, #12
 8005092:	4770      	bx	lr
 8005094:	20000074 	.word	0x20000074
 8005098:	ffff0208 	.word	0xffff0208

0800509c <__ssputs_r>:
 800509c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a0:	688e      	ldr	r6, [r1, #8]
 80050a2:	429e      	cmp	r6, r3
 80050a4:	4682      	mov	sl, r0
 80050a6:	460c      	mov	r4, r1
 80050a8:	4690      	mov	r8, r2
 80050aa:	4699      	mov	r9, r3
 80050ac:	d837      	bhi.n	800511e <__ssputs_r+0x82>
 80050ae:	898a      	ldrh	r2, [r1, #12]
 80050b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050b4:	d031      	beq.n	800511a <__ssputs_r+0x7e>
 80050b6:	6825      	ldr	r5, [r4, #0]
 80050b8:	6909      	ldr	r1, [r1, #16]
 80050ba:	1a6f      	subs	r7, r5, r1
 80050bc:	6965      	ldr	r5, [r4, #20]
 80050be:	2302      	movs	r3, #2
 80050c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80050c8:	f109 0301 	add.w	r3, r9, #1
 80050cc:	443b      	add	r3, r7
 80050ce:	429d      	cmp	r5, r3
 80050d0:	bf38      	it	cc
 80050d2:	461d      	movcc	r5, r3
 80050d4:	0553      	lsls	r3, r2, #21
 80050d6:	d530      	bpl.n	800513a <__ssputs_r+0x9e>
 80050d8:	4629      	mov	r1, r5
 80050da:	f000 fb21 	bl	8005720 <_malloc_r>
 80050de:	4606      	mov	r6, r0
 80050e0:	b950      	cbnz	r0, 80050f8 <__ssputs_r+0x5c>
 80050e2:	230c      	movs	r3, #12
 80050e4:	f8ca 3000 	str.w	r3, [sl]
 80050e8:	89a3      	ldrh	r3, [r4, #12]
 80050ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ee:	81a3      	strh	r3, [r4, #12]
 80050f0:	f04f 30ff 	mov.w	r0, #4294967295
 80050f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f8:	463a      	mov	r2, r7
 80050fa:	6921      	ldr	r1, [r4, #16]
 80050fc:	f7ff ff9a 	bl	8005034 <memcpy>
 8005100:	89a3      	ldrh	r3, [r4, #12]
 8005102:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510a:	81a3      	strh	r3, [r4, #12]
 800510c:	6126      	str	r6, [r4, #16]
 800510e:	6165      	str	r5, [r4, #20]
 8005110:	443e      	add	r6, r7
 8005112:	1bed      	subs	r5, r5, r7
 8005114:	6026      	str	r6, [r4, #0]
 8005116:	60a5      	str	r5, [r4, #8]
 8005118:	464e      	mov	r6, r9
 800511a:	454e      	cmp	r6, r9
 800511c:	d900      	bls.n	8005120 <__ssputs_r+0x84>
 800511e:	464e      	mov	r6, r9
 8005120:	4632      	mov	r2, r6
 8005122:	4641      	mov	r1, r8
 8005124:	6820      	ldr	r0, [r4, #0]
 8005126:	f000 fa93 	bl	8005650 <memmove>
 800512a:	68a3      	ldr	r3, [r4, #8]
 800512c:	1b9b      	subs	r3, r3, r6
 800512e:	60a3      	str	r3, [r4, #8]
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	441e      	add	r6, r3
 8005134:	6026      	str	r6, [r4, #0]
 8005136:	2000      	movs	r0, #0
 8005138:	e7dc      	b.n	80050f4 <__ssputs_r+0x58>
 800513a:	462a      	mov	r2, r5
 800513c:	f000 fb4a 	bl	80057d4 <_realloc_r>
 8005140:	4606      	mov	r6, r0
 8005142:	2800      	cmp	r0, #0
 8005144:	d1e2      	bne.n	800510c <__ssputs_r+0x70>
 8005146:	6921      	ldr	r1, [r4, #16]
 8005148:	4650      	mov	r0, sl
 800514a:	f000 fa9b 	bl	8005684 <_free_r>
 800514e:	e7c8      	b.n	80050e2 <__ssputs_r+0x46>

08005150 <_svfiprintf_r>:
 8005150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005154:	461d      	mov	r5, r3
 8005156:	898b      	ldrh	r3, [r1, #12]
 8005158:	061f      	lsls	r7, r3, #24
 800515a:	b09d      	sub	sp, #116	; 0x74
 800515c:	4680      	mov	r8, r0
 800515e:	460c      	mov	r4, r1
 8005160:	4616      	mov	r6, r2
 8005162:	d50f      	bpl.n	8005184 <_svfiprintf_r+0x34>
 8005164:	690b      	ldr	r3, [r1, #16]
 8005166:	b96b      	cbnz	r3, 8005184 <_svfiprintf_r+0x34>
 8005168:	2140      	movs	r1, #64	; 0x40
 800516a:	f000 fad9 	bl	8005720 <_malloc_r>
 800516e:	6020      	str	r0, [r4, #0]
 8005170:	6120      	str	r0, [r4, #16]
 8005172:	b928      	cbnz	r0, 8005180 <_svfiprintf_r+0x30>
 8005174:	230c      	movs	r3, #12
 8005176:	f8c8 3000 	str.w	r3, [r8]
 800517a:	f04f 30ff 	mov.w	r0, #4294967295
 800517e:	e0c8      	b.n	8005312 <_svfiprintf_r+0x1c2>
 8005180:	2340      	movs	r3, #64	; 0x40
 8005182:	6163      	str	r3, [r4, #20]
 8005184:	2300      	movs	r3, #0
 8005186:	9309      	str	r3, [sp, #36]	; 0x24
 8005188:	2320      	movs	r3, #32
 800518a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800518e:	2330      	movs	r3, #48	; 0x30
 8005190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005194:	9503      	str	r5, [sp, #12]
 8005196:	f04f 0b01 	mov.w	fp, #1
 800519a:	4637      	mov	r7, r6
 800519c:	463d      	mov	r5, r7
 800519e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80051a2:	b10b      	cbz	r3, 80051a8 <_svfiprintf_r+0x58>
 80051a4:	2b25      	cmp	r3, #37	; 0x25
 80051a6:	d13e      	bne.n	8005226 <_svfiprintf_r+0xd6>
 80051a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80051ac:	d00b      	beq.n	80051c6 <_svfiprintf_r+0x76>
 80051ae:	4653      	mov	r3, sl
 80051b0:	4632      	mov	r2, r6
 80051b2:	4621      	mov	r1, r4
 80051b4:	4640      	mov	r0, r8
 80051b6:	f7ff ff71 	bl	800509c <__ssputs_r>
 80051ba:	3001      	adds	r0, #1
 80051bc:	f000 80a4 	beq.w	8005308 <_svfiprintf_r+0x1b8>
 80051c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c2:	4453      	add	r3, sl
 80051c4:	9309      	str	r3, [sp, #36]	; 0x24
 80051c6:	783b      	ldrb	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 809d 	beq.w	8005308 <_svfiprintf_r+0x1b8>
 80051ce:	2300      	movs	r3, #0
 80051d0:	f04f 32ff 	mov.w	r2, #4294967295
 80051d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051d8:	9304      	str	r3, [sp, #16]
 80051da:	9307      	str	r3, [sp, #28]
 80051dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051e0:	931a      	str	r3, [sp, #104]	; 0x68
 80051e2:	462f      	mov	r7, r5
 80051e4:	2205      	movs	r2, #5
 80051e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80051ea:	4850      	ldr	r0, [pc, #320]	; (800532c <_svfiprintf_r+0x1dc>)
 80051ec:	f7fa fff8 	bl	80001e0 <memchr>
 80051f0:	9b04      	ldr	r3, [sp, #16]
 80051f2:	b9d0      	cbnz	r0, 800522a <_svfiprintf_r+0xda>
 80051f4:	06d9      	lsls	r1, r3, #27
 80051f6:	bf44      	itt	mi
 80051f8:	2220      	movmi	r2, #32
 80051fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051fe:	071a      	lsls	r2, r3, #28
 8005200:	bf44      	itt	mi
 8005202:	222b      	movmi	r2, #43	; 0x2b
 8005204:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005208:	782a      	ldrb	r2, [r5, #0]
 800520a:	2a2a      	cmp	r2, #42	; 0x2a
 800520c:	d015      	beq.n	800523a <_svfiprintf_r+0xea>
 800520e:	9a07      	ldr	r2, [sp, #28]
 8005210:	462f      	mov	r7, r5
 8005212:	2000      	movs	r0, #0
 8005214:	250a      	movs	r5, #10
 8005216:	4639      	mov	r1, r7
 8005218:	f811 3b01 	ldrb.w	r3, [r1], #1
 800521c:	3b30      	subs	r3, #48	; 0x30
 800521e:	2b09      	cmp	r3, #9
 8005220:	d94d      	bls.n	80052be <_svfiprintf_r+0x16e>
 8005222:	b1b8      	cbz	r0, 8005254 <_svfiprintf_r+0x104>
 8005224:	e00f      	b.n	8005246 <_svfiprintf_r+0xf6>
 8005226:	462f      	mov	r7, r5
 8005228:	e7b8      	b.n	800519c <_svfiprintf_r+0x4c>
 800522a:	4a40      	ldr	r2, [pc, #256]	; (800532c <_svfiprintf_r+0x1dc>)
 800522c:	1a80      	subs	r0, r0, r2
 800522e:	fa0b f000 	lsl.w	r0, fp, r0
 8005232:	4318      	orrs	r0, r3
 8005234:	9004      	str	r0, [sp, #16]
 8005236:	463d      	mov	r5, r7
 8005238:	e7d3      	b.n	80051e2 <_svfiprintf_r+0x92>
 800523a:	9a03      	ldr	r2, [sp, #12]
 800523c:	1d11      	adds	r1, r2, #4
 800523e:	6812      	ldr	r2, [r2, #0]
 8005240:	9103      	str	r1, [sp, #12]
 8005242:	2a00      	cmp	r2, #0
 8005244:	db01      	blt.n	800524a <_svfiprintf_r+0xfa>
 8005246:	9207      	str	r2, [sp, #28]
 8005248:	e004      	b.n	8005254 <_svfiprintf_r+0x104>
 800524a:	4252      	negs	r2, r2
 800524c:	f043 0302 	orr.w	r3, r3, #2
 8005250:	9207      	str	r2, [sp, #28]
 8005252:	9304      	str	r3, [sp, #16]
 8005254:	783b      	ldrb	r3, [r7, #0]
 8005256:	2b2e      	cmp	r3, #46	; 0x2e
 8005258:	d10c      	bne.n	8005274 <_svfiprintf_r+0x124>
 800525a:	787b      	ldrb	r3, [r7, #1]
 800525c:	2b2a      	cmp	r3, #42	; 0x2a
 800525e:	d133      	bne.n	80052c8 <_svfiprintf_r+0x178>
 8005260:	9b03      	ldr	r3, [sp, #12]
 8005262:	1d1a      	adds	r2, r3, #4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	9203      	str	r2, [sp, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	bfb8      	it	lt
 800526c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005270:	3702      	adds	r7, #2
 8005272:	9305      	str	r3, [sp, #20]
 8005274:	4d2e      	ldr	r5, [pc, #184]	; (8005330 <_svfiprintf_r+0x1e0>)
 8005276:	7839      	ldrb	r1, [r7, #0]
 8005278:	2203      	movs	r2, #3
 800527a:	4628      	mov	r0, r5
 800527c:	f7fa ffb0 	bl	80001e0 <memchr>
 8005280:	b138      	cbz	r0, 8005292 <_svfiprintf_r+0x142>
 8005282:	2340      	movs	r3, #64	; 0x40
 8005284:	1b40      	subs	r0, r0, r5
 8005286:	fa03 f000 	lsl.w	r0, r3, r0
 800528a:	9b04      	ldr	r3, [sp, #16]
 800528c:	4303      	orrs	r3, r0
 800528e:	3701      	adds	r7, #1
 8005290:	9304      	str	r3, [sp, #16]
 8005292:	7839      	ldrb	r1, [r7, #0]
 8005294:	4827      	ldr	r0, [pc, #156]	; (8005334 <_svfiprintf_r+0x1e4>)
 8005296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800529a:	2206      	movs	r2, #6
 800529c:	1c7e      	adds	r6, r7, #1
 800529e:	f7fa ff9f 	bl	80001e0 <memchr>
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d038      	beq.n	8005318 <_svfiprintf_r+0x1c8>
 80052a6:	4b24      	ldr	r3, [pc, #144]	; (8005338 <_svfiprintf_r+0x1e8>)
 80052a8:	bb13      	cbnz	r3, 80052f0 <_svfiprintf_r+0x1a0>
 80052aa:	9b03      	ldr	r3, [sp, #12]
 80052ac:	3307      	adds	r3, #7
 80052ae:	f023 0307 	bic.w	r3, r3, #7
 80052b2:	3308      	adds	r3, #8
 80052b4:	9303      	str	r3, [sp, #12]
 80052b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b8:	444b      	add	r3, r9
 80052ba:	9309      	str	r3, [sp, #36]	; 0x24
 80052bc:	e76d      	b.n	800519a <_svfiprintf_r+0x4a>
 80052be:	fb05 3202 	mla	r2, r5, r2, r3
 80052c2:	2001      	movs	r0, #1
 80052c4:	460f      	mov	r7, r1
 80052c6:	e7a6      	b.n	8005216 <_svfiprintf_r+0xc6>
 80052c8:	2300      	movs	r3, #0
 80052ca:	3701      	adds	r7, #1
 80052cc:	9305      	str	r3, [sp, #20]
 80052ce:	4619      	mov	r1, r3
 80052d0:	250a      	movs	r5, #10
 80052d2:	4638      	mov	r0, r7
 80052d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052d8:	3a30      	subs	r2, #48	; 0x30
 80052da:	2a09      	cmp	r2, #9
 80052dc:	d903      	bls.n	80052e6 <_svfiprintf_r+0x196>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0c8      	beq.n	8005274 <_svfiprintf_r+0x124>
 80052e2:	9105      	str	r1, [sp, #20]
 80052e4:	e7c6      	b.n	8005274 <_svfiprintf_r+0x124>
 80052e6:	fb05 2101 	mla	r1, r5, r1, r2
 80052ea:	2301      	movs	r3, #1
 80052ec:	4607      	mov	r7, r0
 80052ee:	e7f0      	b.n	80052d2 <_svfiprintf_r+0x182>
 80052f0:	ab03      	add	r3, sp, #12
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	4622      	mov	r2, r4
 80052f6:	4b11      	ldr	r3, [pc, #68]	; (800533c <_svfiprintf_r+0x1ec>)
 80052f8:	a904      	add	r1, sp, #16
 80052fa:	4640      	mov	r0, r8
 80052fc:	f3af 8000 	nop.w
 8005300:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005304:	4681      	mov	r9, r0
 8005306:	d1d6      	bne.n	80052b6 <_svfiprintf_r+0x166>
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	065b      	lsls	r3, r3, #25
 800530c:	f53f af35 	bmi.w	800517a <_svfiprintf_r+0x2a>
 8005310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005312:	b01d      	add	sp, #116	; 0x74
 8005314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005318:	ab03      	add	r3, sp, #12
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	4622      	mov	r2, r4
 800531e:	4b07      	ldr	r3, [pc, #28]	; (800533c <_svfiprintf_r+0x1ec>)
 8005320:	a904      	add	r1, sp, #16
 8005322:	4640      	mov	r0, r8
 8005324:	f000 f882 	bl	800542c <_printf_i>
 8005328:	e7ea      	b.n	8005300 <_svfiprintf_r+0x1b0>
 800532a:	bf00      	nop
 800532c:	080058d8 	.word	0x080058d8
 8005330:	080058de 	.word	0x080058de
 8005334:	080058e2 	.word	0x080058e2
 8005338:	00000000 	.word	0x00000000
 800533c:	0800509d 	.word	0x0800509d

08005340 <_printf_common>:
 8005340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005344:	4691      	mov	r9, r2
 8005346:	461f      	mov	r7, r3
 8005348:	688a      	ldr	r2, [r1, #8]
 800534a:	690b      	ldr	r3, [r1, #16]
 800534c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005350:	4293      	cmp	r3, r2
 8005352:	bfb8      	it	lt
 8005354:	4613      	movlt	r3, r2
 8005356:	f8c9 3000 	str.w	r3, [r9]
 800535a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800535e:	4606      	mov	r6, r0
 8005360:	460c      	mov	r4, r1
 8005362:	b112      	cbz	r2, 800536a <_printf_common+0x2a>
 8005364:	3301      	adds	r3, #1
 8005366:	f8c9 3000 	str.w	r3, [r9]
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	0699      	lsls	r1, r3, #26
 800536e:	bf42      	ittt	mi
 8005370:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005374:	3302      	addmi	r3, #2
 8005376:	f8c9 3000 	strmi.w	r3, [r9]
 800537a:	6825      	ldr	r5, [r4, #0]
 800537c:	f015 0506 	ands.w	r5, r5, #6
 8005380:	d107      	bne.n	8005392 <_printf_common+0x52>
 8005382:	f104 0a19 	add.w	sl, r4, #25
 8005386:	68e3      	ldr	r3, [r4, #12]
 8005388:	f8d9 2000 	ldr.w	r2, [r9]
 800538c:	1a9b      	subs	r3, r3, r2
 800538e:	42ab      	cmp	r3, r5
 8005390:	dc28      	bgt.n	80053e4 <_printf_common+0xa4>
 8005392:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005396:	6822      	ldr	r2, [r4, #0]
 8005398:	3300      	adds	r3, #0
 800539a:	bf18      	it	ne
 800539c:	2301      	movne	r3, #1
 800539e:	0692      	lsls	r2, r2, #26
 80053a0:	d42d      	bmi.n	80053fe <_printf_common+0xbe>
 80053a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053a6:	4639      	mov	r1, r7
 80053a8:	4630      	mov	r0, r6
 80053aa:	47c0      	blx	r8
 80053ac:	3001      	adds	r0, #1
 80053ae:	d020      	beq.n	80053f2 <_printf_common+0xb2>
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	68e5      	ldr	r5, [r4, #12]
 80053b4:	f8d9 2000 	ldr.w	r2, [r9]
 80053b8:	f003 0306 	and.w	r3, r3, #6
 80053bc:	2b04      	cmp	r3, #4
 80053be:	bf08      	it	eq
 80053c0:	1aad      	subeq	r5, r5, r2
 80053c2:	68a3      	ldr	r3, [r4, #8]
 80053c4:	6922      	ldr	r2, [r4, #16]
 80053c6:	bf0c      	ite	eq
 80053c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053cc:	2500      	movne	r5, #0
 80053ce:	4293      	cmp	r3, r2
 80053d0:	bfc4      	itt	gt
 80053d2:	1a9b      	subgt	r3, r3, r2
 80053d4:	18ed      	addgt	r5, r5, r3
 80053d6:	f04f 0900 	mov.w	r9, #0
 80053da:	341a      	adds	r4, #26
 80053dc:	454d      	cmp	r5, r9
 80053de:	d11a      	bne.n	8005416 <_printf_common+0xd6>
 80053e0:	2000      	movs	r0, #0
 80053e2:	e008      	b.n	80053f6 <_printf_common+0xb6>
 80053e4:	2301      	movs	r3, #1
 80053e6:	4652      	mov	r2, sl
 80053e8:	4639      	mov	r1, r7
 80053ea:	4630      	mov	r0, r6
 80053ec:	47c0      	blx	r8
 80053ee:	3001      	adds	r0, #1
 80053f0:	d103      	bne.n	80053fa <_printf_common+0xba>
 80053f2:	f04f 30ff 	mov.w	r0, #4294967295
 80053f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053fa:	3501      	adds	r5, #1
 80053fc:	e7c3      	b.n	8005386 <_printf_common+0x46>
 80053fe:	18e1      	adds	r1, r4, r3
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	2030      	movs	r0, #48	; 0x30
 8005404:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005408:	4422      	add	r2, r4
 800540a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800540e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005412:	3302      	adds	r3, #2
 8005414:	e7c5      	b.n	80053a2 <_printf_common+0x62>
 8005416:	2301      	movs	r3, #1
 8005418:	4622      	mov	r2, r4
 800541a:	4639      	mov	r1, r7
 800541c:	4630      	mov	r0, r6
 800541e:	47c0      	blx	r8
 8005420:	3001      	adds	r0, #1
 8005422:	d0e6      	beq.n	80053f2 <_printf_common+0xb2>
 8005424:	f109 0901 	add.w	r9, r9, #1
 8005428:	e7d8      	b.n	80053dc <_printf_common+0x9c>
	...

0800542c <_printf_i>:
 800542c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005430:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005434:	460c      	mov	r4, r1
 8005436:	7e09      	ldrb	r1, [r1, #24]
 8005438:	b085      	sub	sp, #20
 800543a:	296e      	cmp	r1, #110	; 0x6e
 800543c:	4617      	mov	r7, r2
 800543e:	4606      	mov	r6, r0
 8005440:	4698      	mov	r8, r3
 8005442:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005444:	f000 80b3 	beq.w	80055ae <_printf_i+0x182>
 8005448:	d822      	bhi.n	8005490 <_printf_i+0x64>
 800544a:	2963      	cmp	r1, #99	; 0x63
 800544c:	d036      	beq.n	80054bc <_printf_i+0x90>
 800544e:	d80a      	bhi.n	8005466 <_printf_i+0x3a>
 8005450:	2900      	cmp	r1, #0
 8005452:	f000 80b9 	beq.w	80055c8 <_printf_i+0x19c>
 8005456:	2958      	cmp	r1, #88	; 0x58
 8005458:	f000 8083 	beq.w	8005562 <_printf_i+0x136>
 800545c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005460:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005464:	e032      	b.n	80054cc <_printf_i+0xa0>
 8005466:	2964      	cmp	r1, #100	; 0x64
 8005468:	d001      	beq.n	800546e <_printf_i+0x42>
 800546a:	2969      	cmp	r1, #105	; 0x69
 800546c:	d1f6      	bne.n	800545c <_printf_i+0x30>
 800546e:	6820      	ldr	r0, [r4, #0]
 8005470:	6813      	ldr	r3, [r2, #0]
 8005472:	0605      	lsls	r5, r0, #24
 8005474:	f103 0104 	add.w	r1, r3, #4
 8005478:	d52a      	bpl.n	80054d0 <_printf_i+0xa4>
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6011      	str	r1, [r2, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	da03      	bge.n	800548a <_printf_i+0x5e>
 8005482:	222d      	movs	r2, #45	; 0x2d
 8005484:	425b      	negs	r3, r3
 8005486:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800548a:	486f      	ldr	r0, [pc, #444]	; (8005648 <_printf_i+0x21c>)
 800548c:	220a      	movs	r2, #10
 800548e:	e039      	b.n	8005504 <_printf_i+0xd8>
 8005490:	2973      	cmp	r1, #115	; 0x73
 8005492:	f000 809d 	beq.w	80055d0 <_printf_i+0x1a4>
 8005496:	d808      	bhi.n	80054aa <_printf_i+0x7e>
 8005498:	296f      	cmp	r1, #111	; 0x6f
 800549a:	d020      	beq.n	80054de <_printf_i+0xb2>
 800549c:	2970      	cmp	r1, #112	; 0x70
 800549e:	d1dd      	bne.n	800545c <_printf_i+0x30>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	f043 0320 	orr.w	r3, r3, #32
 80054a6:	6023      	str	r3, [r4, #0]
 80054a8:	e003      	b.n	80054b2 <_printf_i+0x86>
 80054aa:	2975      	cmp	r1, #117	; 0x75
 80054ac:	d017      	beq.n	80054de <_printf_i+0xb2>
 80054ae:	2978      	cmp	r1, #120	; 0x78
 80054b0:	d1d4      	bne.n	800545c <_printf_i+0x30>
 80054b2:	2378      	movs	r3, #120	; 0x78
 80054b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054b8:	4864      	ldr	r0, [pc, #400]	; (800564c <_printf_i+0x220>)
 80054ba:	e055      	b.n	8005568 <_printf_i+0x13c>
 80054bc:	6813      	ldr	r3, [r2, #0]
 80054be:	1d19      	adds	r1, r3, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6011      	str	r1, [r2, #0]
 80054c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054cc:	2301      	movs	r3, #1
 80054ce:	e08c      	b.n	80055ea <_printf_i+0x1be>
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6011      	str	r1, [r2, #0]
 80054d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054d8:	bf18      	it	ne
 80054da:	b21b      	sxthne	r3, r3
 80054dc:	e7cf      	b.n	800547e <_printf_i+0x52>
 80054de:	6813      	ldr	r3, [r2, #0]
 80054e0:	6825      	ldr	r5, [r4, #0]
 80054e2:	1d18      	adds	r0, r3, #4
 80054e4:	6010      	str	r0, [r2, #0]
 80054e6:	0628      	lsls	r0, r5, #24
 80054e8:	d501      	bpl.n	80054ee <_printf_i+0xc2>
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	e002      	b.n	80054f4 <_printf_i+0xc8>
 80054ee:	0668      	lsls	r0, r5, #25
 80054f0:	d5fb      	bpl.n	80054ea <_printf_i+0xbe>
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	4854      	ldr	r0, [pc, #336]	; (8005648 <_printf_i+0x21c>)
 80054f6:	296f      	cmp	r1, #111	; 0x6f
 80054f8:	bf14      	ite	ne
 80054fa:	220a      	movne	r2, #10
 80054fc:	2208      	moveq	r2, #8
 80054fe:	2100      	movs	r1, #0
 8005500:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005504:	6865      	ldr	r5, [r4, #4]
 8005506:	60a5      	str	r5, [r4, #8]
 8005508:	2d00      	cmp	r5, #0
 800550a:	f2c0 8095 	blt.w	8005638 <_printf_i+0x20c>
 800550e:	6821      	ldr	r1, [r4, #0]
 8005510:	f021 0104 	bic.w	r1, r1, #4
 8005514:	6021      	str	r1, [r4, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d13d      	bne.n	8005596 <_printf_i+0x16a>
 800551a:	2d00      	cmp	r5, #0
 800551c:	f040 808e 	bne.w	800563c <_printf_i+0x210>
 8005520:	4665      	mov	r5, ip
 8005522:	2a08      	cmp	r2, #8
 8005524:	d10b      	bne.n	800553e <_printf_i+0x112>
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	07db      	lsls	r3, r3, #31
 800552a:	d508      	bpl.n	800553e <_printf_i+0x112>
 800552c:	6923      	ldr	r3, [r4, #16]
 800552e:	6862      	ldr	r2, [r4, #4]
 8005530:	429a      	cmp	r2, r3
 8005532:	bfde      	ittt	le
 8005534:	2330      	movle	r3, #48	; 0x30
 8005536:	f805 3c01 	strble.w	r3, [r5, #-1]
 800553a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800553e:	ebac 0305 	sub.w	r3, ip, r5
 8005542:	6123      	str	r3, [r4, #16]
 8005544:	f8cd 8000 	str.w	r8, [sp]
 8005548:	463b      	mov	r3, r7
 800554a:	aa03      	add	r2, sp, #12
 800554c:	4621      	mov	r1, r4
 800554e:	4630      	mov	r0, r6
 8005550:	f7ff fef6 	bl	8005340 <_printf_common>
 8005554:	3001      	adds	r0, #1
 8005556:	d14d      	bne.n	80055f4 <_printf_i+0x1c8>
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	b005      	add	sp, #20
 800555e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005562:	4839      	ldr	r0, [pc, #228]	; (8005648 <_printf_i+0x21c>)
 8005564:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005568:	6813      	ldr	r3, [r2, #0]
 800556a:	6821      	ldr	r1, [r4, #0]
 800556c:	1d1d      	adds	r5, r3, #4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6015      	str	r5, [r2, #0]
 8005572:	060a      	lsls	r2, r1, #24
 8005574:	d50b      	bpl.n	800558e <_printf_i+0x162>
 8005576:	07ca      	lsls	r2, r1, #31
 8005578:	bf44      	itt	mi
 800557a:	f041 0120 	orrmi.w	r1, r1, #32
 800557e:	6021      	strmi	r1, [r4, #0]
 8005580:	b91b      	cbnz	r3, 800558a <_printf_i+0x15e>
 8005582:	6822      	ldr	r2, [r4, #0]
 8005584:	f022 0220 	bic.w	r2, r2, #32
 8005588:	6022      	str	r2, [r4, #0]
 800558a:	2210      	movs	r2, #16
 800558c:	e7b7      	b.n	80054fe <_printf_i+0xd2>
 800558e:	064d      	lsls	r5, r1, #25
 8005590:	bf48      	it	mi
 8005592:	b29b      	uxthmi	r3, r3
 8005594:	e7ef      	b.n	8005576 <_printf_i+0x14a>
 8005596:	4665      	mov	r5, ip
 8005598:	fbb3 f1f2 	udiv	r1, r3, r2
 800559c:	fb02 3311 	mls	r3, r2, r1, r3
 80055a0:	5cc3      	ldrb	r3, [r0, r3]
 80055a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80055a6:	460b      	mov	r3, r1
 80055a8:	2900      	cmp	r1, #0
 80055aa:	d1f5      	bne.n	8005598 <_printf_i+0x16c>
 80055ac:	e7b9      	b.n	8005522 <_printf_i+0xf6>
 80055ae:	6813      	ldr	r3, [r2, #0]
 80055b0:	6825      	ldr	r5, [r4, #0]
 80055b2:	6961      	ldr	r1, [r4, #20]
 80055b4:	1d18      	adds	r0, r3, #4
 80055b6:	6010      	str	r0, [r2, #0]
 80055b8:	0628      	lsls	r0, r5, #24
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	d501      	bpl.n	80055c2 <_printf_i+0x196>
 80055be:	6019      	str	r1, [r3, #0]
 80055c0:	e002      	b.n	80055c8 <_printf_i+0x19c>
 80055c2:	066a      	lsls	r2, r5, #25
 80055c4:	d5fb      	bpl.n	80055be <_printf_i+0x192>
 80055c6:	8019      	strh	r1, [r3, #0]
 80055c8:	2300      	movs	r3, #0
 80055ca:	6123      	str	r3, [r4, #16]
 80055cc:	4665      	mov	r5, ip
 80055ce:	e7b9      	b.n	8005544 <_printf_i+0x118>
 80055d0:	6813      	ldr	r3, [r2, #0]
 80055d2:	1d19      	adds	r1, r3, #4
 80055d4:	6011      	str	r1, [r2, #0]
 80055d6:	681d      	ldr	r5, [r3, #0]
 80055d8:	6862      	ldr	r2, [r4, #4]
 80055da:	2100      	movs	r1, #0
 80055dc:	4628      	mov	r0, r5
 80055de:	f7fa fdff 	bl	80001e0 <memchr>
 80055e2:	b108      	cbz	r0, 80055e8 <_printf_i+0x1bc>
 80055e4:	1b40      	subs	r0, r0, r5
 80055e6:	6060      	str	r0, [r4, #4]
 80055e8:	6863      	ldr	r3, [r4, #4]
 80055ea:	6123      	str	r3, [r4, #16]
 80055ec:	2300      	movs	r3, #0
 80055ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f2:	e7a7      	b.n	8005544 <_printf_i+0x118>
 80055f4:	6923      	ldr	r3, [r4, #16]
 80055f6:	462a      	mov	r2, r5
 80055f8:	4639      	mov	r1, r7
 80055fa:	4630      	mov	r0, r6
 80055fc:	47c0      	blx	r8
 80055fe:	3001      	adds	r0, #1
 8005600:	d0aa      	beq.n	8005558 <_printf_i+0x12c>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	079b      	lsls	r3, r3, #30
 8005606:	d413      	bmi.n	8005630 <_printf_i+0x204>
 8005608:	68e0      	ldr	r0, [r4, #12]
 800560a:	9b03      	ldr	r3, [sp, #12]
 800560c:	4298      	cmp	r0, r3
 800560e:	bfb8      	it	lt
 8005610:	4618      	movlt	r0, r3
 8005612:	e7a3      	b.n	800555c <_printf_i+0x130>
 8005614:	2301      	movs	r3, #1
 8005616:	464a      	mov	r2, r9
 8005618:	4639      	mov	r1, r7
 800561a:	4630      	mov	r0, r6
 800561c:	47c0      	blx	r8
 800561e:	3001      	adds	r0, #1
 8005620:	d09a      	beq.n	8005558 <_printf_i+0x12c>
 8005622:	3501      	adds	r5, #1
 8005624:	68e3      	ldr	r3, [r4, #12]
 8005626:	9a03      	ldr	r2, [sp, #12]
 8005628:	1a9b      	subs	r3, r3, r2
 800562a:	42ab      	cmp	r3, r5
 800562c:	dcf2      	bgt.n	8005614 <_printf_i+0x1e8>
 800562e:	e7eb      	b.n	8005608 <_printf_i+0x1dc>
 8005630:	2500      	movs	r5, #0
 8005632:	f104 0919 	add.w	r9, r4, #25
 8005636:	e7f5      	b.n	8005624 <_printf_i+0x1f8>
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1ac      	bne.n	8005596 <_printf_i+0x16a>
 800563c:	7803      	ldrb	r3, [r0, #0]
 800563e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005642:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005646:	e76c      	b.n	8005522 <_printf_i+0xf6>
 8005648:	080058e9 	.word	0x080058e9
 800564c:	080058fa 	.word	0x080058fa

08005650 <memmove>:
 8005650:	4288      	cmp	r0, r1
 8005652:	b510      	push	{r4, lr}
 8005654:	eb01 0302 	add.w	r3, r1, r2
 8005658:	d807      	bhi.n	800566a <memmove+0x1a>
 800565a:	1e42      	subs	r2, r0, #1
 800565c:	4299      	cmp	r1, r3
 800565e:	d00a      	beq.n	8005676 <memmove+0x26>
 8005660:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005664:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005668:	e7f8      	b.n	800565c <memmove+0xc>
 800566a:	4283      	cmp	r3, r0
 800566c:	d9f5      	bls.n	800565a <memmove+0xa>
 800566e:	1881      	adds	r1, r0, r2
 8005670:	1ad2      	subs	r2, r2, r3
 8005672:	42d3      	cmn	r3, r2
 8005674:	d100      	bne.n	8005678 <memmove+0x28>
 8005676:	bd10      	pop	{r4, pc}
 8005678:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800567c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005680:	e7f7      	b.n	8005672 <memmove+0x22>
	...

08005684 <_free_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	4605      	mov	r5, r0
 8005688:	2900      	cmp	r1, #0
 800568a:	d045      	beq.n	8005718 <_free_r+0x94>
 800568c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005690:	1f0c      	subs	r4, r1, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	bfb8      	it	lt
 8005696:	18e4      	addlt	r4, r4, r3
 8005698:	f000 f8d2 	bl	8005840 <__malloc_lock>
 800569c:	4a1f      	ldr	r2, [pc, #124]	; (800571c <_free_r+0x98>)
 800569e:	6813      	ldr	r3, [r2, #0]
 80056a0:	4610      	mov	r0, r2
 80056a2:	b933      	cbnz	r3, 80056b2 <_free_r+0x2e>
 80056a4:	6063      	str	r3, [r4, #4]
 80056a6:	6014      	str	r4, [r2, #0]
 80056a8:	4628      	mov	r0, r5
 80056aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056ae:	f000 b8c8 	b.w	8005842 <__malloc_unlock>
 80056b2:	42a3      	cmp	r3, r4
 80056b4:	d90c      	bls.n	80056d0 <_free_r+0x4c>
 80056b6:	6821      	ldr	r1, [r4, #0]
 80056b8:	1862      	adds	r2, r4, r1
 80056ba:	4293      	cmp	r3, r2
 80056bc:	bf04      	itt	eq
 80056be:	681a      	ldreq	r2, [r3, #0]
 80056c0:	685b      	ldreq	r3, [r3, #4]
 80056c2:	6063      	str	r3, [r4, #4]
 80056c4:	bf04      	itt	eq
 80056c6:	1852      	addeq	r2, r2, r1
 80056c8:	6022      	streq	r2, [r4, #0]
 80056ca:	6004      	str	r4, [r0, #0]
 80056cc:	e7ec      	b.n	80056a8 <_free_r+0x24>
 80056ce:	4613      	mov	r3, r2
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	b10a      	cbz	r2, 80056d8 <_free_r+0x54>
 80056d4:	42a2      	cmp	r2, r4
 80056d6:	d9fa      	bls.n	80056ce <_free_r+0x4a>
 80056d8:	6819      	ldr	r1, [r3, #0]
 80056da:	1858      	adds	r0, r3, r1
 80056dc:	42a0      	cmp	r0, r4
 80056de:	d10b      	bne.n	80056f8 <_free_r+0x74>
 80056e0:	6820      	ldr	r0, [r4, #0]
 80056e2:	4401      	add	r1, r0
 80056e4:	1858      	adds	r0, r3, r1
 80056e6:	4282      	cmp	r2, r0
 80056e8:	6019      	str	r1, [r3, #0]
 80056ea:	d1dd      	bne.n	80056a8 <_free_r+0x24>
 80056ec:	6810      	ldr	r0, [r2, #0]
 80056ee:	6852      	ldr	r2, [r2, #4]
 80056f0:	605a      	str	r2, [r3, #4]
 80056f2:	4401      	add	r1, r0
 80056f4:	6019      	str	r1, [r3, #0]
 80056f6:	e7d7      	b.n	80056a8 <_free_r+0x24>
 80056f8:	d902      	bls.n	8005700 <_free_r+0x7c>
 80056fa:	230c      	movs	r3, #12
 80056fc:	602b      	str	r3, [r5, #0]
 80056fe:	e7d3      	b.n	80056a8 <_free_r+0x24>
 8005700:	6820      	ldr	r0, [r4, #0]
 8005702:	1821      	adds	r1, r4, r0
 8005704:	428a      	cmp	r2, r1
 8005706:	bf04      	itt	eq
 8005708:	6811      	ldreq	r1, [r2, #0]
 800570a:	6852      	ldreq	r2, [r2, #4]
 800570c:	6062      	str	r2, [r4, #4]
 800570e:	bf04      	itt	eq
 8005710:	1809      	addeq	r1, r1, r0
 8005712:	6021      	streq	r1, [r4, #0]
 8005714:	605c      	str	r4, [r3, #4]
 8005716:	e7c7      	b.n	80056a8 <_free_r+0x24>
 8005718:	bd38      	pop	{r3, r4, r5, pc}
 800571a:	bf00      	nop
 800571c:	200045ec 	.word	0x200045ec

08005720 <_malloc_r>:
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	1ccd      	adds	r5, r1, #3
 8005724:	f025 0503 	bic.w	r5, r5, #3
 8005728:	3508      	adds	r5, #8
 800572a:	2d0c      	cmp	r5, #12
 800572c:	bf38      	it	cc
 800572e:	250c      	movcc	r5, #12
 8005730:	2d00      	cmp	r5, #0
 8005732:	4606      	mov	r6, r0
 8005734:	db01      	blt.n	800573a <_malloc_r+0x1a>
 8005736:	42a9      	cmp	r1, r5
 8005738:	d903      	bls.n	8005742 <_malloc_r+0x22>
 800573a:	230c      	movs	r3, #12
 800573c:	6033      	str	r3, [r6, #0]
 800573e:	2000      	movs	r0, #0
 8005740:	bd70      	pop	{r4, r5, r6, pc}
 8005742:	f000 f87d 	bl	8005840 <__malloc_lock>
 8005746:	4a21      	ldr	r2, [pc, #132]	; (80057cc <_malloc_r+0xac>)
 8005748:	6814      	ldr	r4, [r2, #0]
 800574a:	4621      	mov	r1, r4
 800574c:	b991      	cbnz	r1, 8005774 <_malloc_r+0x54>
 800574e:	4c20      	ldr	r4, [pc, #128]	; (80057d0 <_malloc_r+0xb0>)
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	b91b      	cbnz	r3, 800575c <_malloc_r+0x3c>
 8005754:	4630      	mov	r0, r6
 8005756:	f000 f863 	bl	8005820 <_sbrk_r>
 800575a:	6020      	str	r0, [r4, #0]
 800575c:	4629      	mov	r1, r5
 800575e:	4630      	mov	r0, r6
 8005760:	f000 f85e 	bl	8005820 <_sbrk_r>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d124      	bne.n	80057b2 <_malloc_r+0x92>
 8005768:	230c      	movs	r3, #12
 800576a:	6033      	str	r3, [r6, #0]
 800576c:	4630      	mov	r0, r6
 800576e:	f000 f868 	bl	8005842 <__malloc_unlock>
 8005772:	e7e4      	b.n	800573e <_malloc_r+0x1e>
 8005774:	680b      	ldr	r3, [r1, #0]
 8005776:	1b5b      	subs	r3, r3, r5
 8005778:	d418      	bmi.n	80057ac <_malloc_r+0x8c>
 800577a:	2b0b      	cmp	r3, #11
 800577c:	d90f      	bls.n	800579e <_malloc_r+0x7e>
 800577e:	600b      	str	r3, [r1, #0]
 8005780:	50cd      	str	r5, [r1, r3]
 8005782:	18cc      	adds	r4, r1, r3
 8005784:	4630      	mov	r0, r6
 8005786:	f000 f85c 	bl	8005842 <__malloc_unlock>
 800578a:	f104 000b 	add.w	r0, r4, #11
 800578e:	1d23      	adds	r3, r4, #4
 8005790:	f020 0007 	bic.w	r0, r0, #7
 8005794:	1ac3      	subs	r3, r0, r3
 8005796:	d0d3      	beq.n	8005740 <_malloc_r+0x20>
 8005798:	425a      	negs	r2, r3
 800579a:	50e2      	str	r2, [r4, r3]
 800579c:	e7d0      	b.n	8005740 <_malloc_r+0x20>
 800579e:	428c      	cmp	r4, r1
 80057a0:	684b      	ldr	r3, [r1, #4]
 80057a2:	bf16      	itet	ne
 80057a4:	6063      	strne	r3, [r4, #4]
 80057a6:	6013      	streq	r3, [r2, #0]
 80057a8:	460c      	movne	r4, r1
 80057aa:	e7eb      	b.n	8005784 <_malloc_r+0x64>
 80057ac:	460c      	mov	r4, r1
 80057ae:	6849      	ldr	r1, [r1, #4]
 80057b0:	e7cc      	b.n	800574c <_malloc_r+0x2c>
 80057b2:	1cc4      	adds	r4, r0, #3
 80057b4:	f024 0403 	bic.w	r4, r4, #3
 80057b8:	42a0      	cmp	r0, r4
 80057ba:	d005      	beq.n	80057c8 <_malloc_r+0xa8>
 80057bc:	1a21      	subs	r1, r4, r0
 80057be:	4630      	mov	r0, r6
 80057c0:	f000 f82e 	bl	8005820 <_sbrk_r>
 80057c4:	3001      	adds	r0, #1
 80057c6:	d0cf      	beq.n	8005768 <_malloc_r+0x48>
 80057c8:	6025      	str	r5, [r4, #0]
 80057ca:	e7db      	b.n	8005784 <_malloc_r+0x64>
 80057cc:	200045ec 	.word	0x200045ec
 80057d0:	200045f0 	.word	0x200045f0

080057d4 <_realloc_r>:
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d6:	4607      	mov	r7, r0
 80057d8:	4614      	mov	r4, r2
 80057da:	460e      	mov	r6, r1
 80057dc:	b921      	cbnz	r1, 80057e8 <_realloc_r+0x14>
 80057de:	4611      	mov	r1, r2
 80057e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057e4:	f7ff bf9c 	b.w	8005720 <_malloc_r>
 80057e8:	b922      	cbnz	r2, 80057f4 <_realloc_r+0x20>
 80057ea:	f7ff ff4b 	bl	8005684 <_free_r>
 80057ee:	4625      	mov	r5, r4
 80057f0:	4628      	mov	r0, r5
 80057f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057f4:	f000 f826 	bl	8005844 <_malloc_usable_size_r>
 80057f8:	42a0      	cmp	r0, r4
 80057fa:	d20f      	bcs.n	800581c <_realloc_r+0x48>
 80057fc:	4621      	mov	r1, r4
 80057fe:	4638      	mov	r0, r7
 8005800:	f7ff ff8e 	bl	8005720 <_malloc_r>
 8005804:	4605      	mov	r5, r0
 8005806:	2800      	cmp	r0, #0
 8005808:	d0f2      	beq.n	80057f0 <_realloc_r+0x1c>
 800580a:	4631      	mov	r1, r6
 800580c:	4622      	mov	r2, r4
 800580e:	f7ff fc11 	bl	8005034 <memcpy>
 8005812:	4631      	mov	r1, r6
 8005814:	4638      	mov	r0, r7
 8005816:	f7ff ff35 	bl	8005684 <_free_r>
 800581a:	e7e9      	b.n	80057f0 <_realloc_r+0x1c>
 800581c:	4635      	mov	r5, r6
 800581e:	e7e7      	b.n	80057f0 <_realloc_r+0x1c>

08005820 <_sbrk_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4c06      	ldr	r4, [pc, #24]	; (800583c <_sbrk_r+0x1c>)
 8005824:	2300      	movs	r3, #0
 8005826:	4605      	mov	r5, r0
 8005828:	4608      	mov	r0, r1
 800582a:	6023      	str	r3, [r4, #0]
 800582c:	f7ff fb6c 	bl	8004f08 <_sbrk>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	d102      	bne.n	800583a <_sbrk_r+0x1a>
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	b103      	cbz	r3, 800583a <_sbrk_r+0x1a>
 8005838:	602b      	str	r3, [r5, #0]
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	200046d0 	.word	0x200046d0

08005840 <__malloc_lock>:
 8005840:	4770      	bx	lr

08005842 <__malloc_unlock>:
 8005842:	4770      	bx	lr

08005844 <_malloc_usable_size_r>:
 8005844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005848:	1f18      	subs	r0, r3, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	bfbc      	itt	lt
 800584e:	580b      	ldrlt	r3, [r1, r0]
 8005850:	18c0      	addlt	r0, r0, r3
 8005852:	4770      	bx	lr

08005854 <_init>:
 8005854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005856:	bf00      	nop
 8005858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585a:	bc08      	pop	{r3}
 800585c:	469e      	mov	lr, r3
 800585e:	4770      	bx	lr

08005860 <_fini>:
 8005860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005862:	bf00      	nop
 8005864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005866:	bc08      	pop	{r3}
 8005868:	469e      	mov	lr, r3
 800586a:	4770      	bx	lr
